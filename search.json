[
  {
    "objectID": "content/01_journal/Automated_Machine_Learning_with_H2O.html",
    "href": "content/01_journal/Automated_Machine_Learning_with_H2O.html",
    "title": "03 Automated Machine Learning with H20",
    "section": "",
    "text": "library(tidymodels)\nlibrary(tidyverse)\nlibrary(magrittr)\nlibrary(dplyr)\nlibrary(sjmisc)\nlibrary(magrittr)\nlibrary(haven)\nlibrary(sjlabelled)\nlibrary(stringr)\nemployee_attrition_tbl <- read.csv(\"datasets-1067-1925-WA_Fn-UseC_-HR-Employee-Attrition.csv\")\ndept_job_role_tbl <- employee_attrition_tbl %>%\n  select(EmployeeNumber, Department, JobRole, PerformanceRating, Attrition)\ndept_job_role_tbl %>%\n  \n  group_by(Attrition) %>%\n  summarize(n = n()) %>%\n  ungroup() %>%\n  mutate(pct = n / sum(n))\n\n\n\n  \n\n\n\n\n1 Attrition by department\n\ndept_job_role_tbl %>%\n  \n  # Block 1\n  group_by(Department, Attrition) %>%\n  summarize(n = n()) %>%\n  ungroup() %>%\n  \n  # Block 2: Caution: It's easy to inadvertently miss grouping when creating counts & percents within groups\n  group_by(Department) %>%\n  mutate(pct = n / sum(n))\n\n#> `summarise()` has grouped output by 'Department'. You can override using the\n#> `.groups` argument.\n\n\n\n\n  \n\n\n\n\n2 Attrition by job role\n\ndept_job_role_tbl %>%\n  \n  # Block 1\n  group_by(Department, JobRole, Attrition) %>%\n  summarize(n = n()) %>%\n  ungroup() %>%\n  \n  # Block 2\n  group_by(Department, JobRole) %>%\n  mutate(pct = n / sum(n)) %>%\n  ungroup() %>%\n  \n  # Block 3\n  filter(Attrition %in% \"Yes\")\n\n#> `summarise()` has grouped output by 'Department', 'JobRole'. You can override\n#> using the `.groups` argument.\n\n\n\n\n  \n\n\n\n\n3 Develop KPI\n\ndept_job_role_tbl %>%\n  \n  # Block 1\n  group_by(Department, JobRole, Attrition) %>%\n  summarize(n = n()) %>%\n  ungroup() %>%\n  \n  # Block 2\n  group_by(Department, JobRole) %>%\n  mutate(pct = n / sum(n)) %>%\n  ungroup() %>%\n  \n  # Block 3\n  filter(Attrition %in% \"Yes\") %>%\n  arrange(desc(pct)) %>%\n  mutate(\n    above_industry_avg = case_when(\n      pct > 0.088 ~ \"Yes\",\n      TRUE ~ \"No\"\n    )\n  )\n\n#> `summarise()` has grouped output by 'Department', 'JobRole'. You can override\n#> using the `.groups` argument.\n\n\n\n\n  \n\n\n\n\n4 Function to calculate attrition cost\n\ncalculate_attrition_cost <- function(\n  \n  # Employee\n  n                    = 1,\n  salary               = 80000,\n  \n  # Direct Costs\n  separation_cost      = 500,\n  vacancy_cost         = 10000,\n  acquisition_cost     = 4900,\n  placement_cost       = 3500,\n  \n  # Productivity Costs\n  net_revenue_per_employee = 250000,\n  workdays_per_year        = 240,\n  workdays_position_open   = 40,\n  workdays_onboarding      = 60,\n  onboarding_efficiency    = 0.50\n  \n) {\n  \n  # Direct Costs\n  direct_cost <- sum(separation_cost, vacancy_cost, acquisition_cost, placement_cost)\n  \n  # Lost Productivity Costs\n  productivity_cost <- net_revenue_per_employee / workdays_per_year *\n    (workdays_position_open + workdays_onboarding * onboarding_efficiency)\n  \n  # Savings of Salary & Benefits (Cost Reduction)\n  salary_benefit_reduction <- salary / workdays_per_year * workdays_position_open\n  \n  # Estimated Turnover Per Employee\n  cost_per_employee <- direct_cost + productivity_cost - salary_benefit_reduction\n  \n  # Total Cost of Employee Turnover\n  total_cost <- n * cost_per_employee\n  \n  return(total_cost)\n  \n}\ncalculate_attrition_cost()\n\n#> [1] 78483.33\n\ncalculate_attrition_cost(200)\n\n#> [1] 15696667\n\n\n\n5 Function creation\n\ndept_job_role_tbl %>%\n  \n  # Block 1\n  group_by(Department, JobRole, Attrition) %>%\n  summarize(n = n()) %>%\n  ungroup() %>%\n  \n  # Block 2\n  group_by(Department, JobRole) %>%\n  mutate(pct = n / sum(n)) %>%\n  ungroup() %>%\n  \n  # Block 3\n  filter(Attrition %in% \"Yes\") %>%\n  arrange(desc(pct)) %>%\n  mutate(\n    above_industry_avg = case_when(\n      pct > 0.088 ~ \"Yes\",\n      TRUE ~ \"No\"\n    )\n  ) %>%\n  \n  # Block 4. Set salaray to 80000 for now\n  mutate(\n    cost_of_attrition = calculate_attrition_cost(n = n, salary = 80000)\n  )\n\n#> `summarise()` has grouped output by 'Department', 'JobRole'. You can override\n#> using the `.groups` argument.\n\n\n\n\n  \n\n\n\n\n6 Function to convert counts to percentages.\n\ndept_job_role_tbl %>%\n  count(Department, JobRole, Attrition)\n\n\n\n  \n\n\ncount_to_pct <- function(data, ..., col = n) {\n  # capture the dots\n  grouping_vars_expr <- quos(...)\n  col_expr <- enquo(col)\n  ret <- data %>%\n    group_by(!!! grouping_vars_expr) %>%\n    mutate(pct = (!! col_expr) / sum(!! col_expr)) %>%\n    ungroup()\n  return(ret)\n}\ndept_job_role_tbl %>%\n  count(JobRole, Attrition) %>%\n  count_to_pct(JobRole)\n\n\n\n  \n\n\ndept_job_role_tbl %>%\n  count(Department, JobRole, Attrition) %>%\n  count_to_pct(Department, JobRole) \n\n\n\n  \n\n\n\n\ndept_job_role_tbl %>%\n  \n  group_by(Department, JobRole, Attrition) %>%\n  summarize(n = n()) %>%\n  ungroup() %>%\n  \n  group_by(Department, JobRole) %>%\n  mutate(pct = n / sum(n)) %>%\n  ungroup() %>%\n  \n  filter(Attrition %in% \"Yes\") %>%\n  arrange(desc(pct)) %>%\n  mutate(\n    above_industry_avg = case_when(\n      pct > 0.088 ~ \"Yes\",\n      TRUE ~ \"No\"\n    )\n  ) %>%\n  \n  mutate(\n    cost_of_attrition = calculate_attrition_cost(n = n, salary = 80000)\n  )\n\n#> `summarise()` has grouped output by 'Department', 'JobRole'. You can override\n#> using the `.groups` argument.\n\n\n\n\n  \n\n\n\n\nassess_attrition <- function(data, attrition_col, attrition_value, baseline_pct) {\n  \n  attrition_col_expr <- enquo(attrition_col)\n  \n  data %>%\n    \n    # Use parenthesis () to give tidy eval evaluation priority\n    filter((!! attrition_col_expr) %in% attrition_value) %>%\n    arrange(desc(pct)) %>%\n    mutate(\n      # Function inputs in numeric format (e.g. baseline_pct = 0.088 don't require tidy eval)\n      above_industry_avg = case_when(\n        pct > baseline_pct ~ \"Yes\",\n        TRUE ~ \"No\"\n      )\n    )\n  \n}\n\n\n7 Visualization\n\ndept_job_role_tbl %>%\n  \n  count(Department, JobRole, Attrition) %>%\n  count_to_pct(Department, JobRole) %>%\n  assess_attrition(Attrition, attrition_value = \"Yes\", baseline_pct = 0.088) %>%\n  mutate(\n    cost_of_attrition = calculate_attrition_cost(n = n, salary = 80000)\n  ) %>%\n  \n  # Data Manipulation\n  mutate(name = str_c(Department, JobRole, sep = \": \") %>% as_factor()) %>%\n  \n  # Check levels\n  # pull(name) %>%\n  # levels()\n  \n  mutate(name      = fct_reorder(name, cost_of_attrition)) %>%\n  mutate(cost_text = str_c(\"$\", format(cost_of_attrition / 1e6, digits = 2),\n                           \"M\", sep = \"\")) %>%\n  \n  #Plotting\n  ggplot(aes(cost_of_attrition, y = name)) +\n  geom_segment(aes(xend = 0, yend = name),    color = \"#2dc6d6\") +\n  geom_point(  aes(size = cost_of_attrition), color = \"#2dc6d6\") +\n  scale_x_continuous(labels = scales::dollar) +\n  geom_label(aes(label = cost_text, size = cost_of_attrition),\n             hjust = \"inward\", color = \"#2dc6d6\") +\n  scale_size(range = c(3, 5)) +\n  labs(title = \"Estimated cost of Attrition: By Dept and Job Role\",\n       y = \"\",\n       x = \"Cost of attrition\") +\n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n# Descriptive Features\nemployee_attrition_tbl %>% select(Age, DistanceFromHome, Gender, MaritalStatus, NumCompaniesWorked, Over18)\n\n\n\n  \n\n\n\n\n# Employment Features\nemployee_attrition_tbl %>% select(Department, EmployeeCount, EmployeeNumber, JobInvolvement, JobLevel, JobRole, JobSatisfaction)\n\n\n\n  \n\n\n\n\n# Compensation Features\nemployee_attrition_tbl %>% select(DailyRate, HourlyRate, MonthlyIncome, MonthlyRate, PercentSalaryHike, StockOptionLevel)\n\n\n\n  \n\n\n\n\n# Survery Results\nemployee_attrition_tbl %>% select(EnvironmentSatisfaction, JobSatisfaction, RelationshipSatisfaction, WorkLifeBalance)\n\n\n\n  \n\n\n\n\n# Performance Data\nemployee_attrition_tbl %>% select(JobInvolvement, PerformanceRating)\n\n\n\n  \n\n\n\n\n# Work-Life Features\nemployee_attrition_tbl %>% select(BusinessTravel, OverTime)\n\n\n\n  \n\n\n\n\n# Training & Education\nemployee_attrition_tbl %>% select(Education, EducationField, TrainingTimesLastYear)\n\n\n\n  \n\n\n\n\n# Time-Based Features\nemployee_attrition_tbl %>% select(TotalWorkingYears, YearsAtCompany, YearsInCurrentRole, YearsSinceLastPromotion, YearsWithCurrManager)\n\n\n\n  \n\n\n\n\nlibrary(GGally)\n# Step 2: Data Visualization ----\nemployee_attrition_tbl %>%\n  select(Attrition,  Gender, MaritalStatus, NumCompaniesWorked, Over18, DistanceFromHome) %>%\n  ggpairs()\n\n#> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n#> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n#> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n#> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n#> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n#> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n#> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n#> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\n# Explore Features by Category\nplot_ggpairs <- function(data, color = NULL, density_alpha = 0.5) {\n  \n  color_expr <- enquo(color)\n  \n  if (rlang::quo_is_null(color_expr)) {\n    \n    g <- data %>%\n      ggpairs(lower = \"blank\") \n    \n  } else {\n    \n    color_name <- quo_name(color_expr)\n    \n    g <- data %>%\n      ggpairs(mapping = aes_string(color = color_name), \n              lower = \"blank\", legend = 1,\n              diag = list(continuous = wrap(\"densityDiag\", \n                                            alpha = density_alpha))) +\n      theme(legend.position = \"bottom\")\n  }\n  \n  return(g)\n  \n}\n\n\n8 Challanges\nDescriptive features: age, gender, marital status\n\nemployee_attrition_tbl %>%\n  select(Attrition, Gender, MaritalStatus, NumCompaniesWorked, Over18, DistanceFromHome) %>%\n  plot_ggpairs(Attrition)\n\n#> Warning: `aes_string()` was deprecated in ggplot2 3.0.0.\n#> ℹ Please use tidy evaluation idioms with `aes()`.\n#> ℹ See also `vignette(\"ggplot2-in-packages\")` for more information.\n\n\n\n\n\n\n\n\nEmployment features: department, job role, job level\n\nemployee_attrition_tbl %>%\n  select(Attrition, contains(\"employee\"), contains(\"department\"), contains(\"job\")) %>%\n  plot_ggpairs(Attrition)\n\n#> Warning in cor(x, y): the standard deviation is zero\n\n#> Warning in cor(x, y): the standard deviation is zero\n\n#> Warning in cor(x, y): the standard deviation is zero\n\n#> Warning in cor(x, y): the standard deviation is zero\n\n#> Warning in cor(x, y): the standard deviation is zero\n\n#> Warning in cor(x, y): the standard deviation is zero\n\n#> Warning in cor(x, y): the standard deviation is zero\n\n#> Warning in cor(x, y): the standard deviation is zero\n\n#> Warning in cor(x, y): the standard deviation is zero\n\n#> Warning in cor(x, y): the standard deviation is zero\n\n#> Warning in cor(x, y): the standard deviation is zero\n\n#> Warning in cor(x, y): the standard deviation is zero\n\n\n\n\n\n\n\n\nCompensation features: HourlyRate, MonthlyIncome,SalaryPercentHike StockOptionLevel\n\nemployee_attrition_tbl %>%\n  select(Attrition, contains(\"income\"), contains(\"rate\"), contains(\"salary\"), contains(\"stock\")) %>%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nSurvey Results: Satisfaction level, Work Life Balance\n\nemployee_attrition_tbl %>%\n  select(Attrition, contains(\"satisfaction\"), contains(\"life\")) %>%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nPerformance Data: Job Involvement, Performance Rating\n\nemployee_attrition_tbl %>%\n  select(Attrition, contains(\"performance\"), contains(\"involvement\")) %>%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nWork-Life Features\n\nemployee_attrition_tbl %>%\n  select(Attrition, contains(\"overtime\"), contains(\"travel\")) %>%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nTraining and Education\n\nemployee_attrition_tbl %>%\n  select(Attrition, contains(\"training\"), contains(\"education\")) %>%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nTime-Based Features: Years at company, years in current role\n\nemployee_attrition_tbl %>%\n  select(Attrition, contains(\"years\")) %>%\n  plot_ggpairs(Attrition)"
  },
  {
    "objectID": "content/01_journal/AUTO_ML_H20_2_Perf_Measure.html",
    "href": "content/01_journal/AUTO_ML_H20_2_Perf_Measure.html",
    "title": "04 Automated Machine Learning with H20 (II) and Performance Measure",
    "section": "",
    "text": "library(tidymodels)\nlibrary(magrittr)\nlibrary(dplyr)\nlibrary(sjmisc)\nlibrary(magrittr)\nlibrary(haven)\nlibrary(sjlabelled)\nlibrary(rsample)\nlibrary(recipes)\nlibrary(rstanarm)\nlibrary(broom.mixed)\nlibrary(h2o)\nlibrary(stringr)\nlibrary(forcats)\nproduct_backorders_tbl <- read.csv(\"product_backorders.csv\")\nproduct_backorders_tbl %>% glimpse()\n\n#> Rows: 19,053\n#> Columns: 23\n#> $ sku               <int> 1113121, 1113268, 1113874, 1114222, 1114823, 1115453…\n#> $ national_inv      <int> 0, 0, 20, 0, 0, 55, -34, 4, 2, -7, 1, 2, 0, 0, 0, 0,…\n#> $ lead_time         <int> 8, 8, 2, 8, 12, 8, 8, 9, 8, 8, 8, 8, 12, 2, 12, 4, 2…\n#> $ in_transit_qty    <int> 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0…\n#> $ forecast_3_month  <int> 6, 2, 45, 9, 31, 216, 120, 43, 4, 56, 2, 5, 5, 54, 4…\n#> $ forecast_6_month  <int> 6, 3, 99, 14, 31, 360, 240, 67, 6, 96, 4, 9, 6, 72, …\n#> $ forecast_9_month  <int> 6, 4, 153, 21, 31, 492, 240, 115, 9, 112, 6, 13, 9, …\n#> $ sales_1_month     <int> 0, 1, 16, 5, 7, 30, 83, 5, 1, 13, 0, 1, 0, 0, 1, 0, …\n#> $ sales_3_month     <int> 4, 2, 42, 17, 15, 108, 122, 22, 5, 30, 2, 5, 4, 0, 3…\n#> $ sales_6_month     <int> 9, 3, 80, 36, 33, 275, 144, 40, 6, 56, 3, 8, 5, 0, 4…\n#> $ sales_9_month     <int> 12, 3, 111, 43, 47, 340, 165, 58, 9, 76, 4, 11, 6, 0…\n#> $ min_bank          <int> 0, 0, 10, 0, 2, 51, 33, 4, 2, 0, 0, 0, 3, 4, 0, 0, 0…\n#> $ potential_issue   <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n#> $ pieces_past_due   <int> 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#> $ perf_6_month_avg  <dbl> 0.90, 0.96, 0.81, 0.96, 0.98, 0.00, 1.00, 0.69, 1.00…\n#> $ perf_12_month_avg <dbl> 0.89, 0.97, 0.88, 0.98, 0.98, 0.00, 0.97, 0.68, 0.95…\n#> $ local_bo_qty      <int> 0, 0, 0, 0, 0, 0, 34, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, …\n#> $ deck_risk         <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n#> $ oe_constraint     <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n#> $ ppap_risk         <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes\", \"No\", \"No\", \"No…\n#> $ stop_auto_buy     <chr> \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Ye…\n#> $ rev_stop          <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n#> $ went_on_backorder <chr> \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Ye…\n\n\n\ndata_split <- initial_split(product_backorders_tbl, prop = 3/4)\n# Assign training and test data\ntrain_data <- training(data_split)\ntest_data  <- testing(data_split)\n# Specifying of the response and the predictor variables\nfactor_names <- c(\"went_on_backorder\")\nproduct_rec <- \n  recipe(went_on_backorder ~ ., data = train_data) %>%  \n  step_dummy(all_nominal(), -all_outcomes()) %>% \n  step_zv(all_predictors()) %>% \n  step_mutate_at(factor_names, fn = as.factor) %>%\n  prep()\n\n#> Warning: Using an external vector in selections was deprecated in tidyselect 1.1.0.\n#> ℹ Please use `all_of()` or `any_of()` instead.\n#>   # Was:\n#>   data %>% select(factor_names)\n#> \n#>   # Now:\n#>   data %>% select(all_of(factor_names))\n#> \n#> See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.\n\nd <- summary(product_rec)\ntrain_tbl <- bake(product_rec, new_data = train_data)\ntest_tbl  <- bake(product_rec, new_data = test_data)\n\n\nh2o.init()\n\n#>  Connection successful!\n#> \n#> R is connected to the H2O cluster: \n#>     H2O cluster uptime:         1 hours 42 minutes \n#>     H2O cluster timezone:       Europe/Berlin \n#>     H2O data parsing timezone:  UTC \n#>     H2O cluster version:        3.40.0.1 \n#>     H2O cluster version age:    3 months and 13 days \n#>     H2O cluster name:           H2O_started_from_R_SHUBHAM_jag251 \n#>     H2O cluster total nodes:    1 \n#>     H2O cluster total memory:   1.34 GB \n#>     H2O cluster total cores:    8 \n#>     H2O cluster allowed cores:  8 \n#>     H2O cluster healthy:        TRUE \n#>     H2O Connection ip:          localhost \n#>     H2O Connection port:        54321 \n#>     H2O Connection proxy:       NA \n#>     H2O Internal Security:      FALSE \n#>     R Version:                  R version 4.3.0 (2023-04-21 ucrt)\n\n\n#> Warning in h2o.clusterInfo(): \n#> Your H2O cluster version is (3 months and 13 days) old. There may be a newer version available.\n#> Please download and install the latest version from: https://h2o-release.s3.amazonaws.com/h2o/latest_stable.html\n\n# Splitting the data for validation df\nsplit_h2o <- h2o.splitFrame(as.h2o(train_tbl), ratios = c(0.75), seed = 1234)\n\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\ntrain_h2o <- split_h2o[[1]]\nvalid_h2o <- split_h2o[[2]]\ntest_h2o  <- as.h2o(test_tbl)\n\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n# Predictors\ny <- \"went_on_backorder\"\nx <- setdiff(names(train_h2o), y)\n\n# AutoML Model\nh2o_models_automl <- h2o.automl(\n  x = x,\n  y = y,\n  training_frame    = train_h2o,\n  validation_frame  = valid_h2o,\n  leaderboard_frame = test_h2o,\n  max_runtime_secs  = 120,\n  nfolds            = 5 \n)\n\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |=                                                                     |   1%\n#> 16:10:16.976: User specified a validation frame with cross-validation still enabled. Please note that the models will still be validated using cross-validation only, the validation frame will be used to provide purely informative validation metrics on the trained models.\n#> 16:10:16.981: AutoML: XGBoost is not available; skipping it.\n  |                                                                            \n  |==                                                                    |   3%\n  |                                                                            \n  |====                                                                  |   5%\n  |                                                                            \n  |=====                                                                 |   7%\n  |                                                                            \n  |======                                                                |   9%\n  |                                                                            \n  |=======                                                               |  11%\n  |                                                                            \n  |=========                                                             |  13%\n  |                                                                            \n  |==========                                                            |  15%\n  |                                                                            \n  |===========                                                           |  16%\n  |                                                                            \n  |=============                                                         |  18%\n  |                                                                            \n  |==============                                                        |  20%\n  |                                                                            \n  |===============                                                       |  22%\n  |                                                                            \n  |=================                                                     |  24%\n  |                                                                            \n  |==================                                                    |  26%\n  |                                                                            \n  |===================                                                   |  28%\n  |                                                                            \n  |=====================                                                 |  30%\n  |                                                                            \n  |======================                                                |  31%\n  |                                                                            \n  |=======================                                               |  33%\n  |                                                                            \n  |=========================                                             |  35%\n  |                                                                            \n  |==========================                                            |  37%\n  |                                                                            \n  |===========================                                           |  39%\n  |                                                                            \n  |=============================                                         |  41%\n  |                                                                            \n  |==============================                                        |  43%\n  |                                                                            \n  |================================                                      |  45%\n  |                                                                            \n  |=================================                                     |  47%\n  |                                                                            \n  |==================================                                    |  49%\n  |                                                                            \n  |====================================                                  |  51%\n  |                                                                            \n  |=====================================                                 |  53%\n  |                                                                            \n  |=======================================                               |  55%\n  |                                                                            \n  |========================================                              |  58%\n  |                                                                            \n  |==========================================                            |  60%\n  |                                                                            \n  |===========================================                           |  61%\n  |                                                                            \n  |============================================                          |  63%\n  |                                                                            \n  |=============================================                         |  65%\n  |                                                                            \n  |===============================================                       |  67%\n  |                                                                            \n  |================================================                      |  69%\n  |                                                                            \n  |==================================================                    |  71%\n  |                                                                            \n  |===================================================                   |  73%\n  |                                                                            \n  |=====================================================                 |  76%\n  |                                                                            \n  |========================================================              |  81%\n  |                                                                            \n  |==========================================================            |  82%\n  |                                                                            \n  |===========================================================           |  84%\n  |                                                                            \n  |=============================================================         |  87%\n  |                                                                            \n  |===============================================================       |  90%\n  |                                                                            \n  |================================================================      |  92%\n  |                                                                            \n  |==================================================================    |  94%\n  |                                                                            \n  |===================================================================   |  96%\n  |                                                                            \n  |====================================================================  |  97%\n  |                                                                            \n  |======================================================================| 100%\n\ntypeof(h2o_models_automl)\n\n#> [1] \"S4\"\n\nslotNames(h2o_models_automl)\n\n#> [1] \"project_name\"   \"leader\"         \"leaderboard\"    \"event_log\"     \n#> [5] \"modeling_steps\" \"training_info\"\n\nh2o_models_automl@leaderboard \n\n#>                                                  model_id       auc   logloss\n#> 1    StackedEnsemble_AllModels_3_AutoML_8_20230522_161016 0.9521150 0.1734839\n#> 2    StackedEnsemble_AllModels_2_AutoML_8_20230522_161016 0.9520351 0.1736906\n#> 3 StackedEnsemble_BestOfFamily_3_AutoML_8_20230522_161016 0.9516850 0.1738234\n#> 4    StackedEnsemble_AllModels_1_AutoML_8_20230522_161016 0.9515002 0.1742879\n#> 5 StackedEnsemble_BestOfFamily_4_AutoML_8_20230522_161016 0.9512607 0.1754807\n#> 6 StackedEnsemble_BestOfFamily_2_AutoML_8_20230522_161016 0.9510698 0.1753238\n#>       aucpr mean_per_class_error      rmse        mse\n#> 1 0.7537432            0.1422546 0.2270746 0.05156287\n#> 2 0.7549406            0.1300663 0.2274027 0.05171198\n#> 3 0.7569671            0.1526326 0.2268515 0.05146161\n#> 4 0.7507710            0.1462348 0.2280150 0.05199082\n#> 5 0.7459053            0.1367080 0.2277613 0.05187521\n#> 6 0.7467245            0.1251232 0.2285553 0.05223754\n#> \n#> [34 rows x 7 columns]\n\nh2o_models_automl@leader\n\n#> Model Details:\n#> ==============\n#> \n#> H2OBinomialModel: stackedensemble\n#> Model ID:  StackedEnsemble_AllModels_3_AutoML_8_20230522_161016 \n#> Model Summary for Stacked Ensemble: \n#>                                          key            value\n#> 1                          Stacking strategy cross_validation\n#> 2       Number of base models (used / total)            13/26\n#> 3           # GBM base models (used / total)            10/18\n#> 4           # DRF base models (used / total)              2/2\n#> 5           # GLM base models (used / total)              1/1\n#> 6  # DeepLearning base models (used / total)              0/5\n#> 7                      Metalearner algorithm              GLM\n#> 8         Metalearner fold assignment scheme           Random\n#> 9                         Metalearner nfolds                5\n#> 10                   Metalearner fold_column               NA\n#> 11        Custom metalearner hyperparameters             None\n#> \n#> \n#> H2OBinomialMetrics: stackedensemble\n#> ** Reported on training data. **\n#> \n#> MSE:  0.01759791\n#> RMSE:  0.1326571\n#> LogLoss:  0.07316684\n#> Mean Per-Class Error:  0.04652287\n#> AUC:  0.9965107\n#> AUCPR:  0.9784657\n#> Gini:  0.9930214\n#> \n#> Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#>          No  Yes    Error        Rate\n#> No     8741   95 0.010751    =95/8836\n#> Yes      99 1104 0.082294    =99/1203\n#> Totals 8840 1199 0.019325  =194/10039\n#> \n#> Maximum Metrics: Maximum metrics at their respective thresholds\n#>                         metric threshold       value idx\n#> 1                       max f1  0.460775    0.919234 172\n#> 2                       max f2  0.353184    0.931029 200\n#> 3                 max f0point5  0.562969    0.945603 144\n#> 4                 max accuracy  0.486809    0.980875 164\n#> 5                max precision  0.990586    1.000000   0\n#> 6                   max recall  0.044774    1.000000 324\n#> 7              max specificity  0.990586    1.000000   0\n#> 8             max absolute_mcc  0.486809    0.908387 164\n#> 9   max min_per_class_accuracy  0.273238    0.967406 224\n#> 10 max mean_per_class_accuracy  0.211749    0.969223 243\n#> 11                     max tns  0.990586 8836.000000   0\n#> 12                     max fns  0.990586 1202.000000   0\n#> 13                     max fps  0.000329 8836.000000 399\n#> 14                     max tps  0.044774 1203.000000 324\n#> 15                     max tnr  0.990586    1.000000   0\n#> 16                     max fnr  0.990586    0.999169   0\n#> 17                     max fpr  0.000329    1.000000 399\n#> 18                     max tpr  0.044774    1.000000 324\n#> \n#> Gains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`\n#> H2OBinomialMetrics: stackedensemble\n#> ** Reported on validation data. **\n#> \n#> MSE:  0.04956409\n#> RMSE:  0.2226299\n#> LogLoss:  0.1661181\n#> Mean Per-Class Error:  0.1522957\n#> AUC:  0.9495689\n#> AUCPR:  0.7177547\n#> Gini:  0.8991379\n#> \n#> Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#>          No Yes    Error       Rate\n#> No     2985 168 0.053283  =168/3153\n#> Yes      96 286 0.251309    =96/382\n#> Totals 3081 454 0.074682  =264/3535\n#> \n#> Maximum Metrics: Maximum metrics at their respective thresholds\n#>                         metric threshold       value idx\n#> 1                       max f1  0.309274    0.684211 200\n#> 2                       max f2  0.176936    0.763987 252\n#> 3                 max f0point5  0.682399    0.725191  95\n#> 4                 max accuracy  0.639449    0.934653 107\n#> 5                max precision  0.977577    1.000000   0\n#> 6                   max recall  0.004514    1.000000 385\n#> 7              max specificity  0.977577    1.000000   0\n#> 8             max absolute_mcc  0.302967    0.645361 203\n#> 9   max min_per_class_accuracy  0.118296    0.887092 276\n#> 10 max mean_per_class_accuracy  0.118296    0.887263 276\n#> 11                     max tns  0.977577 3153.000000   0\n#> 12                     max fns  0.977577  381.000000   0\n#> 13                     max fps  0.000404 3153.000000 399\n#> 14                     max tps  0.004514  382.000000 385\n#> 15                     max tnr  0.977577    1.000000   0\n#> 16                     max fnr  0.977577    0.997382   0\n#> 17                     max fpr  0.000404    1.000000 399\n#> 18                     max tpr  0.004514    1.000000 385\n#> \n#> Gains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`\n#> H2OBinomialMetrics: stackedensemble\n#> ** Reported on cross-validation data. **\n#> ** 5-fold cross-validation on training data (Metrics computed for combined holdout predictions) **\n#> \n#> MSE:  0.04923849\n#> RMSE:  0.2218975\n#> LogLoss:  0.1659318\n#> Mean Per-Class Error:  0.15146\n#> AUC:  0.9551856\n#> AUCPR:  0.7645681\n#> Gini:  0.9103712\n#> \n#> Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#>          No  Yes    Error        Rate\n#> No     9074  389 0.041107   =389/9463\n#> Yes     338  953 0.261813   =338/1291\n#> Totals 9412 1342 0.067603  =727/10754\n#> \n#> Maximum Metrics: Maximum metrics at their respective thresholds\n#>                         metric threshold       value idx\n#> 1                       max f1  0.381732    0.723889 193\n#> 2                       max f2  0.146464    0.781185 275\n#> 3                 max f0point5  0.582038    0.740884 134\n#> 4                 max accuracy  0.498318    0.933978 159\n#> 5                max precision  0.988143    1.000000   0\n#> 6                   max recall  0.003143    1.000000 392\n#> 7              max specificity  0.988143    1.000000   0\n#> 8             max absolute_mcc  0.381732    0.685556 193\n#> 9   max min_per_class_accuracy  0.111635    0.888619 291\n#> 10 max mean_per_class_accuracy  0.083859    0.890927 307\n#> 11                     max tns  0.988143 9463.000000   0\n#> 12                     max fns  0.988143 1290.000000   0\n#> 13                     max fps  0.000172 9463.000000 399\n#> 14                     max tps  0.003143 1291.000000 392\n#> 15                     max tnr  0.988143    1.000000   0\n#> 16                     max fnr  0.988143    0.999225   0\n#> 17                     max fpr  0.000172    1.000000 399\n#> 18                     max tpr  0.003143    1.000000 392\n#> \n#> Gains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`\n#> Cross-Validation Metrics Summary: \n#>                 mean        sd cv_1_valid cv_2_valid cv_3_valid cv_4_valid\n#> accuracy    0.931516  0.008640   0.923783   0.927350   0.934502   0.945267\n#> auc         0.955540  0.007432   0.953220   0.948860   0.959439   0.966538\n#> err         0.068484  0.008640   0.076217   0.072650   0.065498   0.054733\n#> err_count 147.000000 16.370705 166.000000 153.000000 142.000000 122.000000\n#> f0point5    0.710893  0.033636   0.681668   0.683507   0.725926   0.761941\n#>           cv_5_valid\n#> accuracy    0.926676\n#> auc         0.949642\n#> err         0.073324\n#> err_count 152.000000\n#> f0point5    0.701425\n#> \n#> ---\n#>                         mean        sd cv_1_valid cv_2_valid cv_3_valid\n#> precision           0.701143  0.039473   0.662379   0.669091   0.720588\n#> r2                  0.534585  0.043942   0.515327   0.508477   0.551673\n#> recall              0.754257  0.019753   0.771536   0.747968   0.748092\n#> residual_deviance 712.409200 53.364950 756.531200 727.425100 689.690400\n#> rmse                0.221596  0.012500   0.228324   0.225184   0.218248\n#> specificity         0.955723  0.008581   0.945055   0.951075   0.960126\n#>                   cv_4_valid cv_5_valid\n#> precision           0.758491   0.695167\n#> r2                  0.603402   0.494047\n#> recall              0.776062   0.727626\n#> residual_deviance 630.797240 757.602000\n#> rmse                0.201812   0.234412\n#> specificity         0.967513   0.954846\n\n#h2o.getModel(\"StackedEnsemble_AllModels_3_AutoML_4_20230522_155456\") %>% \n#  h2o.saveModel(path = \"h20_models/\")\n\nh2o.loadModel(\"h20_models/StackedEnsemble_AllModels_3_AutoML_4_20230522_155456\")\n\n#> Model Details:\n#> ==============\n#> \n#> H2OBinomialModel: stackedensemble\n#> Model ID:  StackedEnsemble_AllModels_3_AutoML_4_20230522_155456 \n#> Model Summary for Stacked Ensemble: \n#>                                          key            value\n#> 1                          Stacking strategy cross_validation\n#> 2       Number of base models (used / total)            12/26\n#> 3           # GBM base models (used / total)            11/18\n#> 4           # DRF base models (used / total)              1/2\n#> 5  # DeepLearning base models (used / total)              0/5\n#> 6           # GLM base models (used / total)              0/1\n#> 7                      Metalearner algorithm              GLM\n#> 8         Metalearner fold assignment scheme           Random\n#> 9                         Metalearner nfolds                5\n#> 10                   Metalearner fold_column               NA\n#> 11        Custom metalearner hyperparameters             None\n#> \n#> \n#> H2OBinomialMetrics: stackedensemble\n#> ** Reported on training data. **\n#> \n#> MSE:  0.01518071\n#> RMSE:  0.12321\n#> LogLoss:  0.06711314\n#> Mean Per-Class Error:  0.038704\n#> AUC:  0.9976795\n#> AUCPR:  0.9854158\n#> Gini:  0.995359\n#> \n#> Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#>          No  Yes    Error       Rate\n#> No     8702   67 0.007641   =67/8769\n#> Yes      81 1080 0.069767   =81/1161\n#> Totals 8783 1147 0.014904  =148/9930\n#> \n#> Maximum Metrics: Maximum metrics at their respective thresholds\n#>                         metric threshold       value idx\n#> 1                       max f1  0.475562    0.935875 169\n#> 2                       max f2  0.287500    0.944797 216\n#> 3                 max f0point5  0.608594    0.959141 136\n#> 4                 max accuracy  0.529398    0.985297 156\n#> 5                max precision  0.984555    1.000000   0\n#> 6                   max recall  0.074924    1.000000 301\n#> 7              max specificity  0.984555    1.000000   0\n#> 8             max absolute_mcc  0.524538    0.927554 157\n#> 9   max min_per_class_accuracy  0.287500    0.975026 216\n#> 10 max mean_per_class_accuracy  0.255376    0.976739 226\n#> 11                     max tns  0.984555 8769.000000   0\n#> 12                     max fns  0.984555 1159.000000   0\n#> 13                     max fps  0.000170 8769.000000 399\n#> 14                     max tps  0.074924 1161.000000 301\n#> 15                     max tnr  0.984555    1.000000   0\n#> 16                     max fnr  0.984555    0.998277   0\n#> 17                     max fpr  0.000170    1.000000 399\n#> 18                     max tpr  0.074924    1.000000 301\n#> \n#> Gains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`\n#> H2OBinomialMetrics: stackedensemble\n#> ** Reported on validation data. **\n#> \n#> MSE:  0.05011049\n#> RMSE:  0.2238537\n#> LogLoss:  0.1686045\n#> Mean Per-Class Error:  0.1487293\n#> AUC:  0.9528086\n#> AUCPR:  0.7563789\n#> Gini:  0.9056172\n#> \n#> Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#>          No Yes    Error       Rate\n#> No     2982 133 0.042697  =133/3115\n#> Yes     107 313 0.254762   =107/420\n#> Totals 3089 446 0.067893  =240/3535\n#> \n#> Maximum Metrics: Maximum metrics at their respective thresholds\n#>                         metric threshold       value idx\n#> 1                       max f1  0.400060    0.722864 177\n#> 2                       max f2  0.143036    0.781648 262\n#> 3                 max f0point5  0.612379    0.738358 114\n#> 4                 max accuracy  0.423225    0.932390 170\n#> 5                max precision  0.968806    1.000000   0\n#> 6                   max recall  0.004967    1.000000 385\n#> 7              max specificity  0.968806    1.000000   0\n#> 8             max absolute_mcc  0.400060    0.684619 177\n#> 9   max min_per_class_accuracy  0.116576    0.883146 274\n#> 10 max mean_per_class_accuracy  0.143036    0.888978 262\n#> 11                     max tns  0.968806 3115.000000   0\n#> 12                     max fns  0.968806  417.000000   0\n#> 13                     max fps  0.000131 3115.000000 399\n#> 14                     max tps  0.004967  420.000000 385\n#> 15                     max tnr  0.968806    1.000000   0\n#> 16                     max fnr  0.968806    0.992857   0\n#> 17                     max fpr  0.000131    1.000000 399\n#> 18                     max tpr  0.004967    1.000000 385\n#> \n#> Gains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`\n#> H2OBinomialMetrics: stackedensemble\n#> ** Reported on cross-validation data. **\n#> ** 5-fold cross-validation on training data (Metrics computed for combined holdout predictions) **\n#> \n#> MSE:  0.04990117\n#> RMSE:  0.2233857\n#> LogLoss:  0.1661028\n#> Mean Per-Class Error:  0.1455828\n#> AUC:  0.9551331\n#> AUCPR:  0.7504006\n#> Gini:  0.9102661\n#> \n#> Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#>          No  Yes    Error        Rate\n#> No     9012  479 0.050469   =479/9491\n#> Yes     304  959 0.240697   =304/1263\n#> Totals 9316 1438 0.072810  =783/10754\n#> \n#> Maximum Metrics: Maximum metrics at their respective thresholds\n#>                         metric threshold       value idx\n#> 1                       max f1  0.317953    0.710107 209\n#> 2                       max f2  0.121045    0.782931 284\n#> 3                 max f0point5  0.670984    0.724754 103\n#> 4                 max accuracy  0.542712    0.930723 140\n#> 5                max precision  0.977102    1.000000   0\n#> 6                   max recall  0.005601    1.000000 386\n#> 7              max specificity  0.977102    1.000000   0\n#> 8             max absolute_mcc  0.317953    0.670515 209\n#> 9   max min_per_class_accuracy  0.115221    0.890736 287\n#> 10 max mean_per_class_accuracy  0.115221    0.892055 287\n#> 11                     max tns  0.977102 9491.000000   0\n#> 12                     max fns  0.977102 1262.000000   0\n#> 13                     max fps  0.000174 9491.000000 399\n#> 14                     max tps  0.005601 1263.000000 386\n#> 15                     max tnr  0.977102    1.000000   0\n#> 16                     max fnr  0.977102    0.999208   0\n#> 17                     max fpr  0.000174    1.000000 399\n#> 18                     max tpr  0.005601    1.000000 386\n#> \n#> Gains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`\n#> Cross-Validation Metrics Summary: \n#>                 mean        sd cv_1_valid cv_2_valid cv_3_valid cv_4_valid\n#> accuracy    0.929000  0.005518   0.922066   0.933333   0.929434   0.935202\n#> auc         0.955513  0.006073   0.949688   0.957536   0.952269   0.965124\n#> err         0.071000  0.005518   0.077934   0.066667   0.070566   0.064798\n#> err_count 152.600000 10.163661 166.000000 145.000000 152.000000 141.000000\n#> f0point5    0.690775  0.023068   0.670512   0.715350   0.686199   0.714286\n#>           cv_5_valid\n#> accuracy    0.924965\n#> auc         0.952946\n#> err         0.075035\n#> err_count 159.000000\n#> f0point5    0.667531\n#> \n#> ---\n#>                         mean        sd cv_1_valid cv_2_valid cv_3_valid\n#> precision           0.674282  0.028724   0.657244   0.708487   0.676806\n#> r2                  0.519117  0.032779   0.488084   0.537505   0.497883\n#> recall              0.769618  0.050576   0.729412   0.744186   0.726531\n#> residual_deviance 713.452640 36.648144 756.307400 707.550800 726.941900\n#> rmse                0.223122  0.007338   0.232269   0.219895   0.224979\n#> specificity         0.950202  0.008399   0.948267   0.958790   0.955474\n#>                   cv_4_valid cv_5_valid\n#> precision           0.693069   0.635802\n#> r2                  0.567455   0.504656\n#> recall              0.813953   0.834008\n#> residual_deviance 656.240800 720.222400\n#> rmse                0.212614   0.225852\n#> specificity         0.951512   0.936966\n\nextract_h2o_model_name_by_position <- function(h2o_leaderboard, n = 1, verbose = T) {\n   model_name <- h2o_leaderboard %>%\n     as_tibble() %>%\n     slice(n) %>%\n     pull(model_id)\n   \n   if (verbose) message(model_name)\n   \n   return(model_name)\n   \n }\n\n\n1 Perfromace_Measures\n\n2 Leaderboard Visualization\n\n#h2o_models_automl@leaderboard %>% \n#  extract_h2o_model_name_by_position(6) %>% \n#h2o.getModel() %>% \n#  h2o.saveModel(path = \"h20_models/\")\n\n\nstacked_ensemble_h2o <- h2o.loadModel(\"h20_models/StackedEnsemble_AllModels_3_AutoML_4_20230522_155456\")\nstacked_ensemble_h2o\n\n#> Model Details:\n#> ==============\n#> \n#> H2OBinomialModel: stackedensemble\n#> Model ID:  StackedEnsemble_AllModels_3_AutoML_4_20230522_155456 \n#> Model Summary for Stacked Ensemble: \n#>                                          key            value\n#> 1                          Stacking strategy cross_validation\n#> 2       Number of base models (used / total)            12/26\n#> 3           # GBM base models (used / total)            11/18\n#> 4           # DRF base models (used / total)              1/2\n#> 5  # DeepLearning base models (used / total)              0/5\n#> 6           # GLM base models (used / total)              0/1\n#> 7                      Metalearner algorithm              GLM\n#> 8         Metalearner fold assignment scheme           Random\n#> 9                         Metalearner nfolds                5\n#> 10                   Metalearner fold_column               NA\n#> 11        Custom metalearner hyperparameters             None\n#> \n#> \n#> H2OBinomialMetrics: stackedensemble\n#> ** Reported on training data. **\n#> \n#> MSE:  0.01518071\n#> RMSE:  0.12321\n#> LogLoss:  0.06711314\n#> Mean Per-Class Error:  0.038704\n#> AUC:  0.9976795\n#> AUCPR:  0.9854158\n#> Gini:  0.995359\n#> \n#> Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#>          No  Yes    Error       Rate\n#> No     8702   67 0.007641   =67/8769\n#> Yes      81 1080 0.069767   =81/1161\n#> Totals 8783 1147 0.014904  =148/9930\n#> \n#> Maximum Metrics: Maximum metrics at their respective thresholds\n#>                         metric threshold       value idx\n#> 1                       max f1  0.475562    0.935875 169\n#> 2                       max f2  0.287500    0.944797 216\n#> 3                 max f0point5  0.608594    0.959141 136\n#> 4                 max accuracy  0.529398    0.985297 156\n#> 5                max precision  0.984555    1.000000   0\n#> 6                   max recall  0.074924    1.000000 301\n#> 7              max specificity  0.984555    1.000000   0\n#> 8             max absolute_mcc  0.524538    0.927554 157\n#> 9   max min_per_class_accuracy  0.287500    0.975026 216\n#> 10 max mean_per_class_accuracy  0.255376    0.976739 226\n#> 11                     max tns  0.984555 8769.000000   0\n#> 12                     max fns  0.984555 1159.000000   0\n#> 13                     max fps  0.000170 8769.000000 399\n#> 14                     max tps  0.074924 1161.000000 301\n#> 15                     max tnr  0.984555    1.000000   0\n#> 16                     max fnr  0.984555    0.998277   0\n#> 17                     max fpr  0.000170    1.000000 399\n#> 18                     max tpr  0.074924    1.000000 301\n#> \n#> Gains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`\n#> H2OBinomialMetrics: stackedensemble\n#> ** Reported on validation data. **\n#> \n#> MSE:  0.05011049\n#> RMSE:  0.2238537\n#> LogLoss:  0.1686045\n#> Mean Per-Class Error:  0.1487293\n#> AUC:  0.9528086\n#> AUCPR:  0.7563789\n#> Gini:  0.9056172\n#> \n#> Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#>          No Yes    Error       Rate\n#> No     2982 133 0.042697  =133/3115\n#> Yes     107 313 0.254762   =107/420\n#> Totals 3089 446 0.067893  =240/3535\n#> \n#> Maximum Metrics: Maximum metrics at their respective thresholds\n#>                         metric threshold       value idx\n#> 1                       max f1  0.400060    0.722864 177\n#> 2                       max f2  0.143036    0.781648 262\n#> 3                 max f0point5  0.612379    0.738358 114\n#> 4                 max accuracy  0.423225    0.932390 170\n#> 5                max precision  0.968806    1.000000   0\n#> 6                   max recall  0.004967    1.000000 385\n#> 7              max specificity  0.968806    1.000000   0\n#> 8             max absolute_mcc  0.400060    0.684619 177\n#> 9   max min_per_class_accuracy  0.116576    0.883146 274\n#> 10 max mean_per_class_accuracy  0.143036    0.888978 262\n#> 11                     max tns  0.968806 3115.000000   0\n#> 12                     max fns  0.968806  417.000000   0\n#> 13                     max fps  0.000131 3115.000000 399\n#> 14                     max tps  0.004967  420.000000 385\n#> 15                     max tnr  0.968806    1.000000   0\n#> 16                     max fnr  0.968806    0.992857   0\n#> 17                     max fpr  0.000131    1.000000 399\n#> 18                     max tpr  0.004967    1.000000 385\n#> \n#> Gains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`\n#> H2OBinomialMetrics: stackedensemble\n#> ** Reported on cross-validation data. **\n#> ** 5-fold cross-validation on training data (Metrics computed for combined holdout predictions) **\n#> \n#> MSE:  0.04990117\n#> RMSE:  0.2233857\n#> LogLoss:  0.1661028\n#> Mean Per-Class Error:  0.1455828\n#> AUC:  0.9551331\n#> AUCPR:  0.7504006\n#> Gini:  0.9102661\n#> \n#> Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#>          No  Yes    Error        Rate\n#> No     9012  479 0.050469   =479/9491\n#> Yes     304  959 0.240697   =304/1263\n#> Totals 9316 1438 0.072810  =783/10754\n#> \n#> Maximum Metrics: Maximum metrics at their respective thresholds\n#>                         metric threshold       value idx\n#> 1                       max f1  0.317953    0.710107 209\n#> 2                       max f2  0.121045    0.782931 284\n#> 3                 max f0point5  0.670984    0.724754 103\n#> 4                 max accuracy  0.542712    0.930723 140\n#> 5                max precision  0.977102    1.000000   0\n#> 6                   max recall  0.005601    1.000000 386\n#> 7              max specificity  0.977102    1.000000   0\n#> 8             max absolute_mcc  0.317953    0.670515 209\n#> 9   max min_per_class_accuracy  0.115221    0.890736 287\n#> 10 max mean_per_class_accuracy  0.115221    0.892055 287\n#> 11                     max tns  0.977102 9491.000000   0\n#> 12                     max fns  0.977102 1262.000000   0\n#> 13                     max fps  0.000174 9491.000000 399\n#> 14                     max tps  0.005601 1263.000000 386\n#> 15                     max tnr  0.977102    1.000000   0\n#> 16                     max fnr  0.977102    0.999208   0\n#> 17                     max fpr  0.000174    1.000000 399\n#> 18                     max tpr  0.005601    1.000000 386\n#> \n#> Gains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`\n#> Cross-Validation Metrics Summary: \n#>                 mean        sd cv_1_valid cv_2_valid cv_3_valid cv_4_valid\n#> accuracy    0.929000  0.005518   0.922066   0.933333   0.929434   0.935202\n#> auc         0.955513  0.006073   0.949688   0.957536   0.952269   0.965124\n#> err         0.071000  0.005518   0.077934   0.066667   0.070566   0.064798\n#> err_count 152.600000 10.163661 166.000000 145.000000 152.000000 141.000000\n#> f0point5    0.690775  0.023068   0.670512   0.715350   0.686199   0.714286\n#>           cv_5_valid\n#> accuracy    0.924965\n#> auc         0.952946\n#> err         0.075035\n#> err_count 159.000000\n#> f0point5    0.667531\n#> \n#> ---\n#>                         mean        sd cv_1_valid cv_2_valid cv_3_valid\n#> precision           0.674282  0.028724   0.657244   0.708487   0.676806\n#> r2                  0.519117  0.032779   0.488084   0.537505   0.497883\n#> recall              0.769618  0.050576   0.729412   0.744186   0.726531\n#> residual_deviance 713.452640 36.648144 756.307400 707.550800 726.941900\n#> rmse                0.223122  0.007338   0.232269   0.219895   0.224979\n#> specificity         0.950202  0.008399   0.948267   0.958790   0.955474\n#>                   cv_4_valid cv_5_valid\n#> precision           0.693069   0.635802\n#> r2                  0.567455   0.504656\n#> recall              0.813953   0.834008\n#> residual_deviance 656.240800 720.222400\n#> rmse                0.212614   0.225852\n#> specificity         0.951512   0.936966\n\npredictions <- h2o.predict(stacked_ensemble_h2o, newdata = as.h2o(test_tbl))\n\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\ntypeof(predictions)\n\n#> [1] \"environment\"\n\npredictions_tbl <- predictions %>% as_tibble()\npredictions_tbl\n\n\n\n  \n\n\n\n\nh2o_models_automl@leaderboard %>% \n              as_tibble() %>% \n              select(-c(mean_per_class_error, rmse, mse))\n\n\n\n  \n\n\n\n\ndata_transformed_tbl <- h2o_models_automl@leaderboard %>%\n        as_tibble() %>%\n        select(-c(aucpr, mean_per_class_error, rmse, mse)) %>% \n        mutate(model_type = str_extract(model_id, \"[^_]+\")) %>%\n        slice(1:15) %>% \n        rownames_to_column(var = \"rowname\") %>%\n        # Visually this step will not change anything\n        # It reorders the factors under the hood\n        mutate(\n          model_id   = as_factor(model_id) %>% reorder(auc),\n          model_type = as.factor(model_type)\n          ) %>% \n          pivot_longer(cols = -c(model_id, model_type, rowname), \n                       names_to = \"key\", \n                       values_to = \"value\", \n                       names_transform = list(key = forcats::fct_inorder)\n                       ) %>% \n        mutate(model_id = paste0(rowname, \". \", model_id) %>% as_factor() %>% fct_rev())\n\n\ndata_transformed_tbl %>%\n        ggplot(aes(value, model_id, color = model_type)) +\n        geom_point(size = 3) +\n        geom_label(aes(label = round(value, 2), hjust = \"inward\")) +\n        \n        # Facet to break out logloss and auc\n        facet_wrap(~ key, scales = \"free_x\") +\n        labs(title = \"Leaderboard Metrics\",\n             subtitle = paste0(\"Ordered by: \", \"auc\"),\n             y = \"Model Postion, Model ID\", x = \"\") + \n        theme(legend.position = \"bottom\")\n\n\n\n\n\n\n\n\nplot_h2o_leaderboard <- function(h2o_leaderboard, order_by = c(\"auc\", \"logloss\"), \n                                 n_max = 20, size = 4, include_lbl = TRUE) {\n\n    # Setup inputs\n    # adjust input so that all formats are working\n    order_by <- tolower(order_by[[1]])\n\n    leaderboard_tbl <- h2o_leaderboard %>%\n        as.tibble() %>%\n        select(-c(aucpr, mean_per_class_error, rmse, mse)) %>% \n        mutate(model_type = str_extract(model_id, \"[^_]+\")) %>%\n        rownames_to_column(var = \"rowname\") %>%\n        mutate(model_id = paste0(rowname, \". \", model_id) %>% as.factor())\n\n    # Transformation\n    if (order_by == \"auc\") {\n\n        data_transformed_tbl <- leaderboard_tbl %>%\n            slice(1:n_max) %>%\n            mutate(\n                model_id   = as_factor(model_id) %>% reorder(auc),\n                model_type = as.factor(model_type)\n            ) %>%\n                pivot_longer(cols = -c(model_id, model_type, rowname), \n                       names_to = \"key\", \n                       values_to = \"value\", \n                       names_transform = list(key = forcats::fct_inorder)\n                       )\n\n    } else if (order_by == \"logloss\") {\n\n        data_transformed_tbl <- leaderboard_tbl %>%\n            slice(1:n_max) %>%\n            mutate(\n                model_id   = as_factor(model_id) %>% reorder(logloss) %>% fct_rev(),\n                model_type = as.factor(model_type)\n            ) %>%\n            pivot_longer(cols = -c(model_id, model_type, rowname), \n                       names_to = \"key\", \n                       values_to = \"value\", \n                       names_transform = list(key = forcats::fct_inorder)\n                       )\n\n    } else {\n        # If nothing is supplied\n        stop(paste0(\"order_by = '\", order_by, \"' is not a permitted option.\"))\n    }\n\n    # Visualization\n    g <- data_transformed_tbl %>%\n        ggplot(aes(value, model_id, color = model_type)) +\n        geom_point(size = size) +\n        facet_wrap(~ key, scales = \"free_x\") +\n        labs(title = \"Leaderboard Metrics\",\n             subtitle = paste0(\"Ordered by: \", toupper(order_by)),\n             y = \"Model Postion, Model ID\", x = \"\")\n\n    if (include_lbl) g <- g + geom_label(aes(label = round(value, 2), \n                                             hjust = \"inward\"))\n\n    return(g)\n\n}\n\n#Grid Search\n\ndeeplearning_h2o <- h2o.loadModel(\"h20_models/StackedEnsemble_AllModels_3_AutoML_4_20230522_155456\")\n\n# Take a look for the metrics on the training data set\n# For my model the total error in the confusion matrix is ~15 %\ndeeplearning_h2o\n\n#> Model Details:\n#> ==============\n#> \n#> H2OBinomialModel: stackedensemble\n#> Model ID:  StackedEnsemble_AllModels_3_AutoML_4_20230522_155456 \n#> Model Summary for Stacked Ensemble: \n#>                                          key            value\n#> 1                          Stacking strategy cross_validation\n#> 2       Number of base models (used / total)            12/26\n#> 3           # GBM base models (used / total)            11/18\n#> 4           # DRF base models (used / total)              1/2\n#> 5  # DeepLearning base models (used / total)              0/5\n#> 6           # GLM base models (used / total)              0/1\n#> 7                      Metalearner algorithm              GLM\n#> 8         Metalearner fold assignment scheme           Random\n#> 9                         Metalearner nfolds                5\n#> 10                   Metalearner fold_column               NA\n#> 11        Custom metalearner hyperparameters             None\n#> \n#> \n#> H2OBinomialMetrics: stackedensemble\n#> ** Reported on training data. **\n#> \n#> MSE:  0.01518071\n#> RMSE:  0.12321\n#> LogLoss:  0.06711314\n#> Mean Per-Class Error:  0.038704\n#> AUC:  0.9976795\n#> AUCPR:  0.9854158\n#> Gini:  0.995359\n#> \n#> Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#>          No  Yes    Error       Rate\n#> No     8702   67 0.007641   =67/8769\n#> Yes      81 1080 0.069767   =81/1161\n#> Totals 8783 1147 0.014904  =148/9930\n#> \n#> Maximum Metrics: Maximum metrics at their respective thresholds\n#>                         metric threshold       value idx\n#> 1                       max f1  0.475562    0.935875 169\n#> 2                       max f2  0.287500    0.944797 216\n#> 3                 max f0point5  0.608594    0.959141 136\n#> 4                 max accuracy  0.529398    0.985297 156\n#> 5                max precision  0.984555    1.000000   0\n#> 6                   max recall  0.074924    1.000000 301\n#> 7              max specificity  0.984555    1.000000   0\n#> 8             max absolute_mcc  0.524538    0.927554 157\n#> 9   max min_per_class_accuracy  0.287500    0.975026 216\n#> 10 max mean_per_class_accuracy  0.255376    0.976739 226\n#> 11                     max tns  0.984555 8769.000000   0\n#> 12                     max fns  0.984555 1159.000000   0\n#> 13                     max fps  0.000170 8769.000000 399\n#> 14                     max tps  0.074924 1161.000000 301\n#> 15                     max tnr  0.984555    1.000000   0\n#> 16                     max fnr  0.984555    0.998277   0\n#> 17                     max fpr  0.000170    1.000000 399\n#> 18                     max tpr  0.074924    1.000000 301\n#> \n#> Gains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`\n#> H2OBinomialMetrics: stackedensemble\n#> ** Reported on validation data. **\n#> \n#> MSE:  0.05011049\n#> RMSE:  0.2238537\n#> LogLoss:  0.1686045\n#> Mean Per-Class Error:  0.1487293\n#> AUC:  0.9528086\n#> AUCPR:  0.7563789\n#> Gini:  0.9056172\n#> \n#> Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#>          No Yes    Error       Rate\n#> No     2982 133 0.042697  =133/3115\n#> Yes     107 313 0.254762   =107/420\n#> Totals 3089 446 0.067893  =240/3535\n#> \n#> Maximum Metrics: Maximum metrics at their respective thresholds\n#>                         metric threshold       value idx\n#> 1                       max f1  0.400060    0.722864 177\n#> 2                       max f2  0.143036    0.781648 262\n#> 3                 max f0point5  0.612379    0.738358 114\n#> 4                 max accuracy  0.423225    0.932390 170\n#> 5                max precision  0.968806    1.000000   0\n#> 6                   max recall  0.004967    1.000000 385\n#> 7              max specificity  0.968806    1.000000   0\n#> 8             max absolute_mcc  0.400060    0.684619 177\n#> 9   max min_per_class_accuracy  0.116576    0.883146 274\n#> 10 max mean_per_class_accuracy  0.143036    0.888978 262\n#> 11                     max tns  0.968806 3115.000000   0\n#> 12                     max fns  0.968806  417.000000   0\n#> 13                     max fps  0.000131 3115.000000 399\n#> 14                     max tps  0.004967  420.000000 385\n#> 15                     max tnr  0.968806    1.000000   0\n#> 16                     max fnr  0.968806    0.992857   0\n#> 17                     max fpr  0.000131    1.000000 399\n#> 18                     max tpr  0.004967    1.000000 385\n#> \n#> Gains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`\n#> H2OBinomialMetrics: stackedensemble\n#> ** Reported on cross-validation data. **\n#> ** 5-fold cross-validation on training data (Metrics computed for combined holdout predictions) **\n#> \n#> MSE:  0.04990117\n#> RMSE:  0.2233857\n#> LogLoss:  0.1661028\n#> Mean Per-Class Error:  0.1455828\n#> AUC:  0.9551331\n#> AUCPR:  0.7504006\n#> Gini:  0.9102661\n#> \n#> Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#>          No  Yes    Error        Rate\n#> No     9012  479 0.050469   =479/9491\n#> Yes     304  959 0.240697   =304/1263\n#> Totals 9316 1438 0.072810  =783/10754\n#> \n#> Maximum Metrics: Maximum metrics at their respective thresholds\n#>                         metric threshold       value idx\n#> 1                       max f1  0.317953    0.710107 209\n#> 2                       max f2  0.121045    0.782931 284\n#> 3                 max f0point5  0.670984    0.724754 103\n#> 4                 max accuracy  0.542712    0.930723 140\n#> 5                max precision  0.977102    1.000000   0\n#> 6                   max recall  0.005601    1.000000 386\n#> 7              max specificity  0.977102    1.000000   0\n#> 8             max absolute_mcc  0.317953    0.670515 209\n#> 9   max min_per_class_accuracy  0.115221    0.890736 287\n#> 10 max mean_per_class_accuracy  0.115221    0.892055 287\n#> 11                     max tns  0.977102 9491.000000   0\n#> 12                     max fns  0.977102 1262.000000   0\n#> 13                     max fps  0.000174 9491.000000 399\n#> 14                     max tps  0.005601 1263.000000 386\n#> 15                     max tnr  0.977102    1.000000   0\n#> 16                     max fnr  0.977102    0.999208   0\n#> 17                     max fpr  0.000174    1.000000 399\n#> 18                     max tpr  0.005601    1.000000 386\n#> \n#> Gains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`\n#> Cross-Validation Metrics Summary: \n#>                 mean        sd cv_1_valid cv_2_valid cv_3_valid cv_4_valid\n#> accuracy    0.929000  0.005518   0.922066   0.933333   0.929434   0.935202\n#> auc         0.955513  0.006073   0.949688   0.957536   0.952269   0.965124\n#> err         0.071000  0.005518   0.077934   0.066667   0.070566   0.064798\n#> err_count 152.600000 10.163661 166.000000 145.000000 152.000000 141.000000\n#> f0point5    0.690775  0.023068   0.670512   0.715350   0.686199   0.714286\n#>           cv_5_valid\n#> accuracy    0.924965\n#> auc         0.952946\n#> err         0.075035\n#> err_count 159.000000\n#> f0point5    0.667531\n#> \n#> ---\n#>                         mean        sd cv_1_valid cv_2_valid cv_3_valid\n#> precision           0.674282  0.028724   0.657244   0.708487   0.676806\n#> r2                  0.519117  0.032779   0.488084   0.537505   0.497883\n#> recall              0.769618  0.050576   0.729412   0.744186   0.726531\n#> residual_deviance 713.452640 36.648144 756.307400 707.550800 726.941900\n#> rmse                0.223122  0.007338   0.232269   0.219895   0.224979\n#> specificity         0.950202  0.008399   0.948267   0.958790   0.955474\n#>                   cv_4_valid cv_5_valid\n#> precision           0.693069   0.635802\n#> r2                  0.567455   0.504656\n#> recall              0.813953   0.834008\n#> residual_deviance 656.240800 720.222400\n#> rmse                0.212614   0.225852\n#> specificity         0.951512   0.936966\n\n# We want to see how it performs for the testing data frame\ntest_tbl\n\n\n\n  \n\n\n# Make sure to convert it to an h20 object\n# Accuracy of the confusion matrix shows ~85 % accuracy\nh2o.performance(deeplearning_h2o, newdata = as.h2o(test_tbl))\n\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n\n#> H2OBinomialMetrics: stackedensemble\n#> \n#> MSE:  0.03090479\n#> RMSE:  0.1757976\n#> LogLoss:  0.1124682\n#> Mean Per-Class Error:  0.08209054\n#> AUC:  0.9820349\n#> AUCPR:  0.9002727\n#> Gini:  0.9640697\n#> \n#> Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#>          No Yes    Error       Rate\n#> No     4070 101 0.024215  =101/4171\n#> Yes      83 510 0.139966    =83/593\n#> Totals 4153 611 0.038623  =184/4764\n#> \n#> Maximum Metrics: Maximum metrics at their respective thresholds\n#>                         metric threshold       value idx\n#> 1                       max f1  0.415874    0.847176 186\n#> 2                       max f2  0.248800    0.876041 234\n#> 3                 max f0point5  0.628321    0.867166 132\n#> 4                 max accuracy  0.415874    0.961377 186\n#> 5                max precision  0.982698    1.000000   0\n#> 6                   max recall  0.009030    1.000000 373\n#> 7              max specificity  0.982698    1.000000   0\n#> 8             max absolute_mcc  0.415874    0.825198 186\n#> 9   max min_per_class_accuracy  0.185426    0.934069 256\n#> 10 max mean_per_class_accuracy  0.248800    0.936879 234\n#> 11                     max tns  0.982698 4171.000000   0\n#> 12                     max fns  0.982698  591.000000   0\n#> 13                     max fps  0.000195 4171.000000 399\n#> 14                     max tps  0.009030  593.000000 373\n#> 15                     max tnr  0.982698    1.000000   0\n#> 16                     max fnr  0.982698    0.996627   0\n#> 17                     max fpr  0.000195    1.000000 399\n#> 18                     max tpr  0.009030    1.000000 373\n#> \n#> Gains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`\n\n\n\ndeeplearning_grid_01 <- h2o.grid(\n\n    # See help page for available algos\n    algorithm = \"deeplearning\",\n    \n    # I just use the same as the object\n    grid_id = \"deeplearning_grid_01\",\n    \n    # The following is for ?h2o.deeplearning()\n    # predictor and response variables\n    x = x,\n    y = y,\n    \n    # training and validation frame and crossfold validation\n    training_frame   = train_h2o,\n    validation_frame = valid_h2o,\n    nfolds = 5,\n    \n    # Hyperparamters: Use deeplearning_h2o@allparameters to see all\n    hyper_params = list(\n        # Use some combinations (the first one was the original)\n        hidden = list(c(10, 10, 10), c(50, 20, 10), c(20, 20, 20)),\n        epochs = c(10, 50, 100)\n    )\n)\n\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n\n\ndeeplearning_grid_01\n\n#> H2O Grid Details\n#> ================\n#> \n#> Grid ID: deeplearning_grid_01 \n#> Used hyper parameters: \n#>   -  epochs \n#>   -  hidden \n#> Number of models: 27 \n#> Number of failed models: 0 \n#> \n#> Hyper-Parameter Search Summary: ordered by increasing logloss\n#>      epochs       hidden                     model_ids logloss\n#> 1  51.98131 [20, 20, 20] deeplearning_grid_01_model_26 0.26379\n#> 2  51.99945 [50, 20, 10] deeplearning_grid_01_model_23 0.26582\n#> 3 104.00695 [20, 20, 20] deeplearning_grid_01_model_27 0.26591\n#> 4  52.02540 [50, 20, 10]  deeplearning_grid_01_model_5 0.26626\n#> 5 104.00379 [10, 10, 10] deeplearning_grid_01_model_12 0.26644\n#> \n#> ---\n#>      epochs       hidden                     model_ids logloss\n#> 22 10.40998 [20, 20, 20] deeplearning_grid_01_model_25 0.31253\n#> 23 10.40050 [50, 20, 10]  deeplearning_grid_01_model_4 0.31383\n#> 24 10.41285 [50, 20, 10] deeplearning_grid_01_model_22 0.31431\n#> 25 10.40323 [10, 10, 10] deeplearning_grid_01_model_10 0.31441\n#> 26 10.38621 [10, 10, 10] deeplearning_grid_01_model_19 0.31553\n#> 27 10.38391 [20, 20, 20]  deeplearning_grid_01_model_7 0.31723\n\n\n\nh2o.getGrid(grid_id = \"deeplearning_grid_01\", sort_by = \"auc\", decreasing = TRUE)\n\n#> H2O Grid Details\n#> ================\n#> \n#> Grid ID: deeplearning_grid_01 \n#> Used hyper parameters: \n#>   -  epochs \n#>   -  hidden \n#> Number of models: 27 \n#> Number of failed models: 0 \n#> \n#> Hyper-Parameter Search Summary: ordered by decreasing auc\n#>      epochs       hidden                     model_ids     auc\n#> 1 104.00379 [10, 10, 10] deeplearning_grid_01_model_12 0.88703\n#> 2 103.98735 [50, 20, 10] deeplearning_grid_01_model_15 0.88033\n#> 3  52.02540 [50, 20, 10]  deeplearning_grid_01_model_5 0.87406\n#> 4  51.98131 [20, 20, 20] deeplearning_grid_01_model_26 0.87255\n#> 5 104.00695 [20, 20, 20] deeplearning_grid_01_model_27 0.87145\n#> \n#> ---\n#>      epochs       hidden                     model_ids     auc\n#> 22 10.38391 [20, 20, 20]  deeplearning_grid_01_model_7 0.78665\n#> 23 10.40921 [50, 20, 10] deeplearning_grid_01_model_13 0.78259\n#> 24 10.40050 [50, 20, 10]  deeplearning_grid_01_model_4 0.78081\n#> 25 10.41285 [50, 20, 10] deeplearning_grid_01_model_22 0.77510\n#> 26 10.40323 [10, 10, 10] deeplearning_grid_01_model_10 0.77277\n#> 27 10.38621 [10, 10, 10] deeplearning_grid_01_model_19 0.77125\n\n\n\ndeeplearning_grid_01_model_1 <- h2o.getModel(\"deeplearning_grid_01_model_1\")\n\ndeeplearning_grid_01_model_1 %>% h2o.auc(train = T, valid = T, xval = T)\n\n#>     train     valid      xval \n#> 0.8361493 0.8271711 0.7910136\n\n##     train     valid      xval \n## 0.9093134 0.7922078 0.8299115 \n\n# We can tell the model is overfitting because of the huge difference between training AUC and the validation / cross validation AUC\n\n# Run it on the test data\ndeeplearning_grid_01_model_1 %>%\n    h2o.performance(newdata = as.h2o(test_tbl))\n\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n\n#> H2OBinomialMetrics: deeplearning\n#> \n#> MSE:  0.08850556\n#> RMSE:  0.2974988\n#> LogLoss:  0.2985452\n#> Mean Per-Class Error:  0.2926177\n#> AUC:  0.8295438\n#> AUCPR:  0.4553864\n#> Gini:  0.6590875\n#> \n#> Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#>          No Yes    Error       Rate\n#> No     3819 352 0.084392  =352/4171\n#> Yes     297 296 0.500843   =297/593\n#> Totals 4116 648 0.136230  =649/4764\n#> \n#> Maximum Metrics: Maximum metrics at their respective thresholds\n#>                         metric threshold       value idx\n#> 1                       max f1  0.230878    0.477035 157\n#> 2                       max f2  0.119744    0.572157 262\n#> 3                 max f0point5  0.250097    0.493162 139\n#> 4                 max accuracy  0.320835    0.891268 100\n#> 5                max precision  0.999999    1.000000   0\n#> 6                   max recall  0.000099    1.000000 399\n#> 7              max specificity  0.999999    1.000000   0\n#> 8             max absolute_mcc  0.230878    0.399415 157\n#> 9   max min_per_class_accuracy  0.155834    0.739631 229\n#> 10 max mean_per_class_accuracy  0.129068    0.743258 254\n#> 11                     max tns  0.999999 4171.000000   0\n#> 12                     max fns  0.999999  592.000000   0\n#> 13                     max fps  0.000099 4171.000000 399\n#> 14                     max tps  0.000099  593.000000 399\n#> 15                     max tnr  0.999999    1.000000   0\n#> 16                     max fnr  0.999999    0.998314   0\n#> 17                     max fpr  0.000099    1.000000 399\n#> 18                     max tpr  0.000099    1.000000 399\n#> \n#> Gains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`\n\n\n\n3 H2O Performance\n\n#h2o.getModel(\"StackedEnsemble_AllModels_1_AutoML_4_20230522_155456\") %>% \n#  h2o.saveModel(path = \"h20_models/\")\n\n\n# 4. Assessing Performance ----\nstacked_ensemble_1_h2o <- h2o.loadModel(\"h20_models/StackedEnsemble_AllModels_3_AutoML_4_20230522_155456\")\nstacked_ensemble_2_h2o     <- h2o.loadModel(\"h20_models/StackedEnsemble_AllModels_1_AutoML_4_20230522_155456\")\ngbm_h20     <- h2o.loadModel(\"h20_models/GBM_4_AutoML_4_20230522_155456\")\n\n\nperformance_h2o <- h2o.performance(stacked_ensemble_h2o, newdata = as.h2o(test_tbl))\n\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\ntypeof(performance_h2o)\n\n#> [1] \"S4\"\n\nperformance_h2o %>% slotNames()\n\n#> [1] \"algorithm\" \"on_train\"  \"on_valid\"  \"on_xval\"   \"metrics\"\n\n# We are focusing on the slot metrics. This slot contains all possible metrics\nperformance_h2o@metrics\n\n#> $model\n#> $model$`__meta`\n#> $model$`__meta`$schema_version\n#> [1] 3\n#> \n#> $model$`__meta`$schema_name\n#> [1] \"ModelKeyV3\"\n#> \n#> $model$`__meta`$schema_type\n#> [1] \"Key<Model>\"\n#> \n#> \n#> $model$name\n#> [1] \"StackedEnsemble_AllModels_3_AutoML_4_20230522_155456\"\n#> \n#> $model$type\n#> [1] \"Key<Model>\"\n#> \n#> $model$URL\n#> [1] \"/3/Models/StackedEnsemble_AllModels_3_AutoML_4_20230522_155456\"\n#> \n#> \n#> $model_checksum\n#> [1] \"-3887415369153323008\"\n#> \n#> $frame\n#> $frame$name\n#> [1] \"test_tbl_sid_a6d2_210\"\n#> \n#> \n#> $frame_checksum\n#> [1] \"-1920105868233955392\"\n#> \n#> $description\n#> NULL\n#> \n#> $scoring_time\n#> [1] 1.684765e+12\n#> \n#> $predictions\n#> NULL\n#> \n#> $MSE\n#> [1] 0.03090479\n#> \n#> $RMSE\n#> [1] 0.1757976\n#> \n#> $nobs\n#> [1] 4764\n#> \n#> $custom_metric_name\n#> NULL\n#> \n#> $custom_metric_value\n#> [1] 0\n#> \n#> $r2\n#> [1] 0.7164207\n#> \n#> $logloss\n#> [1] 0.1124682\n#> \n#> $AUC\n#> [1] 0.9820349\n#> \n#> $pr_auc\n#> [1] 0.9002727\n#> \n#> $Gini\n#> [1] 0.9640697\n#> \n#> $mean_per_class_error\n#> [1] 0.08209054\n#> \n#> $domain\n#> [1] \"No\"  \"Yes\"\n#> \n#> $cm\n#> $cm$`__meta`\n#> $cm$`__meta`$schema_version\n#> [1] 3\n#> \n#> $cm$`__meta`$schema_name\n#> [1] \"ConfusionMatrixV3\"\n#> \n#> $cm$`__meta`$schema_type\n#> [1] \"ConfusionMatrix\"\n#> \n#> \n#> $cm$table\n#> Confusion Matrix: Row labels: Actual class; Column labels: Predicted class\n#>          No Yes  Error          Rate\n#> No     4070 101 0.0242 = 101 / 4,171\n#> Yes      83 510 0.1400 =    83 / 593\n#> Totals 4153 611 0.0386 = 184 / 4,764\n#> \n#> \n#> $thresholds_and_metric_scores\n#> Metrics for Thresholds: Binomial metrics as a function of classification thresholds\n#>   threshold       f1       f2 f0point5 accuracy precision   recall specificity\n#> 1  0.982698 0.006723 0.004212 0.016639 0.875945  1.000000 0.003373    1.000000\n#> 2  0.977661 0.013400 0.008418 0.032841 0.876364  1.000000 0.006745    1.000000\n#> 3  0.974290 0.023333 0.014712 0.056361 0.876994  1.000000 0.011804    1.000000\n#> 4  0.972466 0.033167 0.020991 0.078989 0.877624  1.000000 0.016863    1.000000\n#> 5  0.970299 0.039669 0.025168 0.093604 0.878044  1.000000 0.020236    1.000000\n#>   absolute_mcc min_per_class_accuracy mean_per_class_accuracy  tns fns fps tps\n#> 1     0.054352               0.003373                0.501686 4171 591   0   2\n#> 2     0.076881               0.006745                0.503373 4171 589   0   4\n#> 3     0.101736               0.011804                0.505902 4171 586   0   7\n#> 4     0.121636               0.016863                0.508432 4171 583   0  10\n#> 5     0.133274               0.020236                0.510118 4171 581   0  12\n#>        tnr      fnr      fpr      tpr idx\n#> 1 1.000000 0.996627 0.000000 0.003373   0\n#> 2 1.000000 0.993255 0.000000 0.006745   1\n#> 3 1.000000 0.988196 0.000000 0.011804   2\n#> 4 1.000000 0.983137 0.000000 0.016863   3\n#> 5 1.000000 0.979764 0.000000 0.020236   4\n#> \n#> ---\n#>     threshold       f1       f2 f0point5 accuracy precision   recall\n#> 395  0.001776 0.232503 0.430959 0.159195 0.178212  0.131544 1.000000\n#> 396  0.001448 0.229046 0.426189 0.156605 0.162049  0.129335 1.000000\n#> 397  0.001320 0.228825 0.425883 0.156440 0.160999  0.129194 1.000000\n#> 398  0.001135 0.224919 0.420448 0.153524 0.142107  0.126709 1.000000\n#> 399  0.000850 0.223563 0.418549 0.152513 0.135390  0.125849 1.000000\n#> 400  0.000195 0.221393 0.415499 0.150898 0.124475  0.124475 1.000000\n#>     specificity absolute_mcc min_per_class_accuracy mean_per_class_accuracy tns\n#> 395    0.061376     0.089854               0.061376                0.530688 256\n#> 396    0.042915     0.074501               0.042915                0.521458 179\n#> 397    0.041717     0.073413               0.041717                0.520858 174\n#> 398    0.020139     0.050515               0.020139                0.510070  84\n#> 399    0.012467     0.039610               0.012467                0.506234  52\n#> 400    0.000000     0.000000               0.000000                0.500000   0\n#>     fns  fps tps      tnr      fnr      fpr      tpr idx\n#> 395   0 3915 593 0.061376 0.000000 0.938624 1.000000 394\n#> 396   0 3992 593 0.042915 0.000000 0.957085 1.000000 395\n#> 397   0 3997 593 0.041717 0.000000 0.958283 1.000000 396\n#> 398   0 4087 593 0.020139 0.000000 0.979861 1.000000 397\n#> 399   0 4119 593 0.012467 0.000000 0.987533 1.000000 398\n#> 400   0 4171 593 0.000000 0.000000 1.000000 1.000000 399\n#> \n#> $max_criteria_and_metric_scores\n#> Maximum Metrics: Maximum metrics at their respective thresholds\n#>                         metric threshold       value idx\n#> 1                       max f1  0.415874    0.847176 186\n#> 2                       max f2  0.248800    0.876041 234\n#> 3                 max f0point5  0.628321    0.867166 132\n#> 4                 max accuracy  0.415874    0.961377 186\n#> 5                max precision  0.982698    1.000000   0\n#> 6                   max recall  0.009030    1.000000 373\n#> 7              max specificity  0.982698    1.000000   0\n#> 8             max absolute_mcc  0.415874    0.825198 186\n#> 9   max min_per_class_accuracy  0.185426    0.934069 256\n#> 10 max mean_per_class_accuracy  0.248800    0.936879 234\n#> 11                     max tns  0.982698 4171.000000   0\n#> 12                     max fns  0.982698  591.000000   0\n#> 13                     max fps  0.000195 4171.000000 399\n#> 14                     max tps  0.009030  593.000000 373\n#> 15                     max tnr  0.982698    1.000000   0\n#> 16                     max fnr  0.982698    0.996627   0\n#> 17                     max fpr  0.000195    1.000000 399\n#> 18                     max tpr  0.009030    1.000000 373\n#> \n#> $gains_lift_table\n#> Gains/Lift Table: Avg response rate: 12.45 %, avg score: 13.05 %\n#>    group cumulative_data_fraction lower_threshold     lift cumulative_lift\n#> 1      1               0.01007557        0.949275 7.866358        7.866358\n#> 2      2               0.02015113        0.929061 7.698988        7.782673\n#> 3      3               0.03001679        0.914481 7.691866        7.752827\n#> 4      4               0.04009236        0.897432 7.698988        7.739297\n#> 5      5               0.05016793        0.873036 7.866358        7.764815\n#> 6      6               0.10012594        0.638745 6.784786        7.275828\n#> 7      7               0.15008396        0.286137 3.510536        6.022486\n#> 8      8               0.20004198        0.117261 0.911389        4.746053\n#> 9      9               0.29995802        0.039494 0.320674        3.271959\n#> 10    10               0.40008396        0.019447 0.151580        2.491045\n#> 11    11               0.50000000        0.012257 0.016878        1.996627\n#> 12    12               0.59991604        0.008337 0.016878        1.666900\n#> 13    13               0.70004198        0.005751 0.000000        1.428486\n#> 14    14               0.79995802        0.003962 0.000000        1.250066\n#> 15    15               0.89987406        0.002304 0.000000        1.111267\n#> 16    16               1.00000000        0.000037 0.000000        1.000000\n#>    response_rate    score cumulative_response_rate cumulative_score\n#> 1       0.979167 0.963257                 0.979167         0.963257\n#> 2       0.958333 0.939116                 0.968750         0.951187\n#> 3       0.957447 0.921446                 0.965035         0.941412\n#> 4       0.958333 0.906532                 0.963351         0.932646\n#> 5       0.979167 0.886821                 0.966527         0.923443\n#> 6       0.844538 0.774924                 0.905660         0.849339\n#> 7       0.436975 0.451900                 0.749650         0.717045\n#> 8       0.113445 0.185321                 0.590766         0.584253\n#> 9       0.039916 0.066859                 0.407278         0.411909\n#> 10      0.018868 0.027361                 0.310073         0.315671\n#> 11      0.002101 0.015312                 0.248531         0.255650\n#> 12      0.002101 0.010078                 0.207488         0.214750\n#> 13      0.000000 0.006984                 0.177811         0.185033\n#> 14      0.000000 0.004836                 0.155602         0.162526\n#> 15      0.000000 0.003139                 0.138325         0.144829\n#> 16      0.000000 0.001431                 0.124475         0.130471\n#>    capture_rate cumulative_capture_rate        gain cumulative_gain\n#> 1      0.079258                0.079258  686.635750      686.635750\n#> 2      0.077572                0.156830  669.898820      678.267285\n#> 3      0.075885                0.232715  669.186610      675.282727\n#> 4      0.077572                0.310287  669.898820      673.929703\n#> 5      0.079258                0.389545  686.635750      676.481546\n#> 6      0.338954                0.728499  578.478609      627.582806\n#> 7      0.175379                0.903879  251.053609      502.248611\n#> 8      0.045531                0.949410   -8.861082      374.605267\n#> 9      0.032040                0.981450  -67.932603      227.195872\n#> 10     0.015177                0.996627  -84.842025      149.104541\n#> 11     0.001686                0.998314  -98.312242       99.662732\n#> 12     0.001686                1.000000  -98.312242       66.689993\n#> 13     0.000000                1.000000 -100.000000       42.848576\n#> 14     0.000000                1.000000 -100.000000       25.006560\n#> 15     0.000000                1.000000 -100.000000       11.126662\n#> 16     0.000000                1.000000 -100.000000        0.000000\n#>    kolmogorov_smirnov\n#> 1            0.079018\n#> 2            0.156110\n#> 3            0.231516\n#> 4            0.308608\n#> 5            0.387627\n#> 6            0.717710\n#> 7            0.860963\n#> 8            0.855907\n#> 9            0.778381\n#> 10           0.681355\n#> 11           0.569160\n#> 12           0.456965\n#> 13           0.342604\n#> 14           0.228482\n#> 15           0.114361\n#> 16           0.000000\n#> \n#> $residual_deviance\n#> [1] 1071.597\n#> \n#> $null_deviance\n#> [1] 3582.358\n#> \n#> $AIC\n#> [1] 1097.597\n#> \n#> $null_degrees_of_freedom\n#> [1] 4763\n#> \n#> $residual_degrees_of_freedom\n#> [1] 4751\n\n\n\n# Classifier Summary Metrics\n\nh2o.auc(performance_h2o, train = T, valid = T, xval = T)\n\n#> [1] 0.9820349\n\n# Caution: \"train, \"val\", and \"xval\" arugments only work for models (not performance objects)\nh2o.auc(stacked_ensemble_h2o, train = T, valid = T, xval = T)\n\n#>     train     valid      xval \n#> 0.9976795 0.9528086 0.9551331\n\nh2o.giniCoef(performance_h2o)\n\n#> [1] 0.9640697\n\nh2o.logloss(performance_h2o)\n\n#> [1] 0.1124682\n\n# result for the training data\nh2o.confusionMatrix(stacked_ensemble_h2o)\n\n\n\n  \n\n\n# result for the hold out set\nh2o.confusionMatrix(performance_h2o)\n\n\n\n  \n\n\n\n\n# Precision vs Recall Plot\n\n# This is on the test set\nperformance_tbl <- performance_h2o %>%\n    h2o.metric() %>%\n    as.tibble() \n\n#> Warning: `as.tibble()` was deprecated in tibble 2.0.0.\n#> ℹ Please use `as_tibble()` instead.\n#> ℹ The signature and semantics have changed, see `?as_tibble`.\n\nperformance_tbl %>% \n  glimpse()\n\n#> Rows: 400\n#> Columns: 20\n#> $ threshold               <dbl> 0.9826975, 0.9776614, 0.9742905, 0.9724661, 0.…\n#> $ f1                      <dbl> 0.006722689, 0.013400335, 0.023333333, 0.03316…\n#> $ f2                      <dbl> 0.004212300, 0.008417508, 0.014712064, 0.02099…\n#> $ f0point5                <dbl> 0.01663894, 0.03284072, 0.05636071, 0.07898894…\n#> $ accuracy                <dbl> 0.8759446, 0.8763644, 0.8769941, 0.8776238, 0.…\n#> $ precision               <dbl> 1.0000000, 1.0000000, 1.0000000, 1.0000000, 1.…\n#> $ recall                  <dbl> 0.003372681, 0.006745363, 0.011804384, 0.01686…\n#> $ specificity             <dbl> 1.0000000, 1.0000000, 1.0000000, 1.0000000, 1.…\n#> $ absolute_mcc            <dbl> 0.05435169, 0.07688104, 0.10173613, 0.12163629…\n#> $ min_per_class_accuracy  <dbl> 0.003372681, 0.006745363, 0.011804384, 0.01686…\n#> $ mean_per_class_accuracy <dbl> 0.5016863, 0.5033727, 0.5059022, 0.5084317, 0.…\n#> $ tns                     <dbl> 4171, 4171, 4171, 4171, 4171, 4170, 4170, 4170…\n#> $ fns                     <dbl> 591, 589, 586, 583, 581, 575, 569, 567, 564, 5…\n#> $ fps                     <dbl> 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n#> $ tps                     <dbl> 2, 4, 7, 10, 12, 18, 24, 26, 29, 34, 38, 43, 4…\n#> $ tnr                     <dbl> 1.0000000, 1.0000000, 1.0000000, 1.0000000, 1.…\n#> $ fnr                     <dbl> 0.9966273, 0.9932546, 0.9881956, 0.9831366, 0.…\n#> $ fpr                     <dbl> 0.0000000000, 0.0000000000, 0.0000000000, 0.00…\n#> $ tpr                     <dbl> 0.003372681, 0.006745363, 0.011804384, 0.01686…\n#> $ idx                     <int> 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, …\n\n\n\ntheme_new <- theme(\n      legend.position  = \"bottom\",\n      legend.key       = element_blank(),,\n      panel.background = element_rect(fill   = \"transparent\"),\n      panel.border     = element_rect(color = \"black\", fill = NA, size = 0.5),\n      panel.grid.major = element_line(color = \"grey\", size = 0.333)\n      ) \n\n#> Warning: The `size` argument of `element_rect()` is deprecated as of ggplot2 3.4.0.\n#> ℹ Please use the `linewidth` argument instead.\n\n\n#> Warning: The `size` argument of `element_line()` is deprecated as of ggplot2 3.4.0.\n#> ℹ Please use the `linewidth` argument instead.\n\n\n\nperformance_tbl %>%\n    filter(f1 == max(f1))\n\n\n\n  \n\n\nperformance_tbl %>%\n    ggplot(aes(x = threshold)) +\n    geom_line(aes(y = precision), color = \"blue\", size = 1) +\n    geom_line(aes(y = recall), color = \"red\", size = 1) +\n    \n    # Insert line where precision and recall are harmonically optimized\n    geom_vline(xintercept = h2o.find_threshold_by_max_metric(performance_h2o, \"f1\")) +\n    labs(title = \"Precision vs Recall\", y = \"value\") +\n    theme_new\n\n#> Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\n#> ℹ Please use `linewidth` instead.\n\n\n\n\n\n\n\n\n\n4 ROC Plot\n\npath <- \"h20_models/StackedEnsemble_BestOfFamily_3_AutoML_4_20230522_155456\"\n\nload_model_performance_metrics <- function(path, test_tbl) {\n    \n    model_h2o <- h2o.loadModel(path)\n    perf_h2o  <- h2o.performance(model_h2o, newdata = as.h2o(test_tbl)) \n    \n    perf_h2o %>%\n        h2o.metric() %>%\n        as_tibble() %>%\n        mutate(auc = h2o.auc(perf_h2o)) %>%\n        select(tpr, fpr, auc)\n    \n}\n\nmodel_metrics_tbl <- fs::dir_info(path = \"h20_models/\") %>%\n    select(path) %>%\n    mutate(metrics = map(path, load_model_performance_metrics, test_tbl)) %>%\n    unnest(cols = metrics)\n\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n\n\nmodel_metrics_tbl %>%\n    mutate(\n        # Extract the model names\n        path = str_split(path, pattern = \"/\", simplify = T)[,2] %>% as_factor(),\n        auc  = auc %>% round(3) %>% as.character() %>% as_factor()\n        ) %>%\n    ggplot(aes(fpr, tpr, color = path, linetype = auc)) +\n    geom_line(size = 1) +\n    \n    # just for demonstration purposes\n    geom_abline(color = \"red\", linetype = \"dotted\") +\n    \n    theme_new +\n    theme(\n      legend.direction = \"vertical\",\n      ) +\n    labs(\n        title = \"ROC Plot\",\n        subtitle = \"Performance of 3 Top Performing Models\"\n    )\n\n\n\n\n\n\n\n\n# Precision vs Recall\n\nload_model_performance_metrics <- function(path, test_tbl) {\n    \n    model_h2o <- h2o.loadModel(path)\n    perf_h2o  <- h2o.performance(model_h2o, newdata = as.h2o(test_tbl)) \n    \n    perf_h2o %>%\n        h2o.metric() %>%\n        as_tibble() %>%\n        mutate(auc = h2o.auc(perf_h2o)) %>%\n        select(tpr, fpr, auc, precision, recall)\n    \n}\n\nmodel_metrics_tbl <- fs::dir_info(path = \"h20_models/\") %>%\n    select(path) %>%\n    mutate(metrics = map(path, load_model_performance_metrics, test_tbl)) %>%\n    unnest(cols = metrics)\n\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\nmodel_metrics_tbl %>%\n    mutate(\n        path = str_split(path, pattern = \"/\", simplify = T)[,2] %>% as_factor(),\n        auc  = auc %>% round(3) %>% as.character() %>% as_factor()\n    ) %>%\n    ggplot(aes(recall, precision, color = path, linetype = auc)) +\n    geom_line(size = 1) +\n    theme_new + \n    theme(\n      legend.direction = \"vertical\",\n      ) +\n    labs(\n        title = \"Precision vs Recall Plot\",\n        subtitle = \"Performance of 3 Top Performing Models\"\n    )\n\n\n\n\n\n\n\n\n# Gain & Lift\n\nranked_predictions_tbl <- predictions_tbl %>%\n    bind_cols(test_tbl) %>%\n    select(predict:Yes, went_on_backorder) %>%\n    # Sorting from highest to lowest class probability\n    arrange(desc(Yes))\n\n\nranked_predictions_tbl %>%\n    mutate(ntile = ntile(Yes, n = 10)) %>%\n    group_by(ntile) %>%\n    summarise(\n        cases = n(),\n        responses = sum(went_on_backorder == \"Yes\")\n    ) %>%\n    arrange(desc(ntile))\n\n\n\n  \n\n\n\n\ncalculated_gain_lift_tbl <- ranked_predictions_tbl %>%\n    mutate(ntile = ntile(Yes, n = 10)) %>%\n    group_by(ntile) %>%\n    summarise(\n        cases = n(),\n        responses = sum(went_on_backorder == \"Yes\")\n    ) %>%\n    arrange(desc(ntile)) %>%\n    \n    # Add group numbers (opposite of ntile)\n    mutate(group = row_number()) %>%\n    select(group, cases, responses) %>%\n    \n    # Calculations\n    mutate(\n        cumulative_responses = cumsum(responses),\n        pct_responses        = responses / sum(responses),\n        gain                 = cumsum(pct_responses),\n        cumulative_pct_cases = cumsum(cases) / sum(cases),\n        lift                 = gain / cumulative_pct_cases,\n        gain_baseline        = cumulative_pct_cases,\n        lift_baseline        = gain_baseline / cumulative_pct_cases\n    )\n\ncalculated_gain_lift_tbl \n\n\n\n  \n\n\n\n\ngain_lift_tbl <- performance_h2o %>%\n    h2o.gainsLift() %>%\n    as.tibble()\n\n## Gain Chart\n\ngain_transformed_tbl <- gain_lift_tbl %>% \n    select(group, cumulative_data_fraction, cumulative_capture_rate, cumulative_lift) %>%\n    select(-contains(\"lift\")) %>%\n    mutate(baseline = cumulative_data_fraction) %>%\n    rename(gain     = cumulative_capture_rate) %>%\n    # prepare the data for the plotting (for the color and group aesthetics)\n    pivot_longer(cols = c(gain, baseline), values_to = \"value\", names_to = \"key\")\n\ngain_transformed_tbl %>%\n    ggplot(aes(x = cumulative_data_fraction, y = value, color = key)) +\n    geom_line(size = 1.5) +\n    labs(\n        title = \"Gain Chart\",\n        x = \"Cumulative Data Fraction\",\n        y = \"Gain\"\n    ) +\n    theme_new\n\n\n\n\n\n\n\n\n## Lift Plot\n\nlift_transformed_tbl <- gain_lift_tbl %>% \n    select(group, cumulative_data_fraction, cumulative_capture_rate, cumulative_lift) %>%\n    select(-contains(\"capture\")) %>%\n    mutate(baseline = 1) %>%\n    rename(lift = cumulative_lift) %>%\n    pivot_longer(cols = c(lift, baseline), values_to = \"value\", names_to = \"key\")\n\nlift_transformed_tbl %>%\n    ggplot(aes(x = cumulative_data_fraction, y = value, color = key)) +\n    geom_line(size = 1.5) +\n    labs(\n        title = \"Lift Chart\",\n        x = \"Cumulative Data Fraction\",\n        y = \"Lift\"\n    ) +\n    theme_new\n\n\n\n\n\n\n\n\n# 5. Performance Visualization ----  \nlibrary(cowplot)\nlibrary(glue)\n\n#> \n#> Attaching package: 'glue'\n\n\n#> The following object is masked from 'package:sjmisc':\n#> \n#>     trim\n\n# set values to test the function while building it\nh2o_leaderboard <- h2o_models_automl@leaderboard\nnewdata <- test_tbl\norder_by <- \"auc\"\nmax_models <- 4\nsize <- 1\n\nplot_h2o_performance <- function(h2o_leaderboard, newdata, order_by = c(\"auc\", \"logloss\"),\n                                 max_models = 3, size = 1.5) {\n    \n    # Inputs\n    \n    leaderboard_tbl <- h2o_leaderboard %>%\n        as_tibble() %>%\n        slice(1:max_models)\n    \n    newdata_tbl <- newdata %>%\n        as_tibble()\n    \n    # Selecting the first, if nothing is provided\n    order_by      <- tolower(order_by[[1]]) \n    \n    # Convert string stored in a variable to column name (symbol)\n    order_by_expr <- rlang::sym(order_by)\n\n    # Turn of the progress bars ( opposite h2o.show_progress())\n    h2o.no_progress()\n    \n    # 1. Model metrics\n    \n    get_model_performance_metrics <- function(model_id, test_tbl) {\n        \n        model_h2o <- h2o.getModel(model_id)\n        perf_h2o  <- h2o.performance(model_h2o, newdata = as.h2o(test_tbl))\n        \n        perf_h2o %>%\n            h2o.metric() %>%\n            as.tibble() %>%\n            select(threshold, tpr, fpr, precision, recall)\n        \n    }\n    \n    model_metrics_tbl <- leaderboard_tbl %>%\n        mutate(metrics = map(model_id, get_model_performance_metrics, newdata_tbl)) %>%\n        unnest(cols = metrics) %>%\n        mutate(\n          model_id = as_factor(model_id) %>% \n                      # programmatically reorder factors depending on order_by\n                      fct_reorder(!! order_by_expr, \n                                  .desc = ifelse(order_by == \"auc\", TRUE, FALSE)),\n          auc      = auc %>% \n                      round(3) %>% \n                      as.character() %>% \n                      as_factor() %>% \n                      fct_reorder(as.numeric(model_id)),\n          logloss  = logloss %>% \n                      round(4) %>% \n                      as.character() %>% \n                      as_factor() %>% \n                      fct_reorder(as.numeric(model_id))\n        )\n    \n    \n    # 1A. ROC Plot\n    \n    p1 <- model_metrics_tbl %>%\n        ggplot(aes(fpr, tpr, color = model_id, linetype = !! order_by_expr)) +\n        geom_line(size = size) +\n        theme_new +\n        labs(title = \"ROC\", x = \"FPR\", y = \"TPR\") +\n        theme(legend.direction = \"vertical\") \n        \n    \n    # 1B. Precision vs Recall\n    \n    p2 <- model_metrics_tbl %>%\n        ggplot(aes(recall, precision, color = model_id, linetype = !! order_by_expr)) +\n        geom_line(size = size) +\n        theme_new +\n        labs(title = \"Precision Vs Recall\", x = \"Recall\", y = \"Precision\") +\n        theme(legend.position = \"none\") \n    \n    \n    # 2. Gain / Lift\n    \n    get_gain_lift <- function(model_id, test_tbl) {\n        \n        model_h2o <- h2o.getModel(model_id)\n        perf_h2o  <- h2o.performance(model_h2o, newdata = as.h2o(test_tbl)) \n        \n        perf_h2o %>%\n            h2o.gainsLift() %>%\n            as.tibble() %>%\n            select(group, cumulative_data_fraction, cumulative_capture_rate, cumulative_lift)\n        \n    }\n    \n    gain_lift_tbl <- leaderboard_tbl %>%\n        mutate(metrics = map(model_id, get_gain_lift, newdata_tbl)) %>%\n        unnest(cols = metrics) %>%\n        mutate(\n            model_id = as_factor(model_id) %>% \n                fct_reorder(!! order_by_expr, \n                            .desc = ifelse(order_by == \"auc\", TRUE, FALSE)),\n            auc  = auc %>% \n                round(3) %>% \n                as.character() %>% \n                as_factor() %>% \n                fct_reorder(as.numeric(model_id)),\n            logloss = logloss %>% \n                round(4) %>% \n                as.character() %>% \n                as_factor() %>% \n                fct_reorder(as.numeric(model_id))\n        ) %>%\n        rename(\n            gain = cumulative_capture_rate,\n            lift = cumulative_lift\n        ) \n    \n    # 2A. Gain Plot\n    \n    p3 <- gain_lift_tbl %>%\n        ggplot(aes(cumulative_data_fraction, gain, \n                          color = model_id, linetype = !! order_by_expr)) +\n        geom_line(size = size,) +\n        geom_segment(x = 0, y = 0, xend = 1, yend = 1, \n                     color = \"red\", size = size, linetype = \"dotted\") +\n        theme_new +\n        expand_limits(x = c(0, 1), y = c(0, 1)) +\n        labs(title = \"Gain\",\n             x = \"Cumulative Data Fraction\", y = \"Gain\") +\n        theme(legend.position = \"none\")\n    \n    # 2B. Lift Plot\n    \n    p4 <- gain_lift_tbl %>%\n        ggplot(aes(cumulative_data_fraction, lift, \n                          color = model_id, linetype = !! order_by_expr)) +\n        geom_line(size = size) +\n        geom_segment(x = 0, y = 1, xend = 1, yend = 1, \n                     color = \"red\", size = size, linetype = \"dotted\") +\n        theme_new +\n        expand_limits(x = c(0, 1), y = c(0, 1)) +\n        labs(title = \"Lift\",\n             x = \"Cumulative Data Fraction\", y = \"Lift\") +\n        theme(legend.position = \"none\") \n    \n    \n    # Combine using cowplot\n    \n    # cowplot::get_legend extracts a legend from a ggplot object\n    p_legend <- get_legend(p1)\n    # Remove legend from p1\n    p1 <- p1 + theme(legend.position = \"none\")\n    \n    # cowplot::plt_grid() combines multiple ggplots into a single cowplot object\n    p <- cowplot::plot_grid(p1, p2, p3, p4, ncol = 2)\n    \n    # cowplot::ggdraw() sets up a drawing layer\n    p_title <- ggdraw() + \n    \n        # cowplot::draw_label() draws text on a ggdraw layer / ggplot object\n        draw_label(\"H2O Model Metrics\", size = 18, fontface = \"bold\", \n                   color = \"#2C3E50\")\n    \n    p_subtitle <- ggdraw() + \n        draw_label(glue(\"Ordered by {toupper(order_by)}\"), size = 10,  \n                   color = \"#2C3E50\")\n    \n    # Combine everything\n    ret <- plot_grid(p_title, p_subtitle, p, p_legend, \n    \n                     # Adjust the relative spacing, so that the legends always fits\n                     ncol = 1, rel_heights = c(0.05, 0.05, 1, 0.05 * max_models))\n    \n    h2o.show_progress()\n    \n    return(ret)\n    \n}\n\nh2o_models_automl@leaderboard %>%\n    plot_h2o_performance(newdata = test_tbl, order_by = \"logloss\", \n                         size = 0.5, max_models = 4)"
  },
  {
    "objectID": "content/01_journal/Chapter_1_Challenge.html",
    "href": "content/01_journal/Chapter_1_Challenge.html",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "",
    "text": "Your organization wants to know which companies are similar to each other to help in identifying potential customers of a SAAS software solution (e.g. Salesforce CRM or equivalent) in various segments of the market. The Sales Department is very interested in this analysis, which will help them more easily penetrate various market segments.\nYou will be using stock prices in this analysis. You come up with a method to classify companies based on how their stocks trade using their daily stock returns (percentage movement from one day to the next). This analysis will help your organization determine which companies are related to each other (competitors and have similar attributes).\nYou can analyze the stock prices using what you’ve learned in the unsupervised learning tools including K-Means and UMAP. You will use a combination of kmeans() to find groups and umap() to visualize similarity of daily stock returns."
  },
  {
    "objectID": "content/01_journal/Chapter_1_Challenge.html#step-1---convert-stock-prices-to-a-standardized-format-daily-returns",
    "href": "content/01_journal/Chapter_1_Challenge.html#step-1---convert-stock-prices-to-a-standardized-format-daily-returns",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "\n5.1 Step 1 - Convert stock prices to a standardized format (daily returns)",
    "text": "5.1 Step 1 - Convert stock prices to a standardized format (daily returns)\nWhat you first need to do is get the data in a format that can be converted to a “user-item” style matrix. The challenge here is to connect the dots between what we have and what we need to do to format it properly.\nWe know that in order to compare the data, it needs to be standardized or normalized. Why? Because we cannot compare values (stock prices) that are of completely different magnitudes. In order to standardize, we will convert from adjusted stock price (dollar value) to daily returns (percent change from previous day). Here is the formula.\n\\[\nreturn_{daily} = \\frac{price_{i}-price_{i-1}}{price_{i-1}}\n\\]\nFirst, what do we have? We have stock prices for every stock in the SP 500 Index, which is the daily stock prices for over 500 stocks. The data set is over 1.2M observations.\n\nsp_500_prices_tbl %>% glimpse()\n\n#> Rows: 1,225,765\n#> Columns: 8\n#> $ symbol   <chr> \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT…\n#> $ date     <date> 2009-01-02, 2009-01-05, 2009-01-06, 2009-01-07, 2009-01-08, …\n#> $ open     <dbl> 19.53, 20.20, 20.75, 20.19, 19.63, 20.17, 19.71, 19.52, 19.53…\n#> $ high     <dbl> 20.40, 20.67, 21.00, 20.29, 20.19, 20.30, 19.79, 19.99, 19.68…\n#> $ low      <dbl> 19.37, 20.06, 20.61, 19.48, 19.55, 19.41, 19.30, 19.52, 19.01…\n#> $ close    <dbl> 20.33, 20.52, 20.76, 19.51, 20.12, 19.52, 19.47, 19.82, 19.09…\n#> $ volume   <dbl> 50084000, 61475200, 58083400, 72709900, 70255400, 49815300, 5…\n#> $ adjusted <dbl> 15.86624, 16.01451, 16.20183, 15.22628, 15.70234, 15.23408, 1…\n\n\nYour first task is to convert to a tibble named sp_500_daily_returns_tbl by performing the following operations:\n\nSelect the symbol, date and adjusted columns\nFilter to dates beginning in the year 2018 and beyond.\nCompute a Lag of 1 day on the adjusted stock price. Be sure to group by symbol first, otherwise we will have lags computed using values from the previous stock in the data frame.\nRemove a NA values from the lagging operation\nCompute the difference between adjusted and the lag\nCompute the percentage difference by dividing the difference by that lag. Name this column pct_return.\nReturn only the symbol, date, and pct_return columns\nSave as a variable named sp_500_daily_returns_tbl\n\n\n\n# Apply your data transformation skills!\nsp_500_daily_returns_tbl <- sp_500_prices_tbl %>%\n  select(symbol, date, adjusted) %>%\n  filter(year(date) >= 2018) %>%\n  group_by(symbol) %>%\n  mutate(lag_adjusted = lag(adjusted),\n         pct_return = (adjusted - lag_adjusted) / lag_adjusted) %>%\n  drop_na(lag_adjusted) %>%\n  select(symbol, date, pct_return)\n\nsp_500_daily_returns_tbl\n\n\n\n  \n\n\n# Output: sp_500_daily_returns_tbl"
  },
  {
    "objectID": "content/01_journal/Chapter_1_Challenge.html#step-2---convert-to-user-item-format",
    "href": "content/01_journal/Chapter_1_Challenge.html#step-2---convert-to-user-item-format",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "\n5.2 Step 2 - Convert to User-Item Format",
    "text": "5.2 Step 2 - Convert to User-Item Format\nThe next step is to convert to a user-item format with the symbol in the first column and every other column the value of the daily returns (pct_return) for every stock at each date.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nsp_500_daily_returns_tbl <- read_rds(\"sp_500_daily_returns_tbl.rds\")\nsp_500_daily_returns_tbl\n\n\n\n  \n\n\n\nNow that we have the daily returns (percentage change from one day to the next), we can convert to a user-item format. The user in this case is the symbol (company), and the item in this case is the pct_return at each date.\n\nSpread the date column to get the values as percentage returns. Make sure to fill an NA values with zeros.\nSave the result as stock_date_matrix_tbl\n\n\n\n# Convert to User-Item Format\nstock_date_matrix_tbl <- sp_500_daily_returns_tbl %>%\n  spread(date, pct_return, fill = 0)\n\nstock_date_matrix_tbl\n\n\n\n  \n\n\n# Output: stock_date_matrix_tbl"
  },
  {
    "objectID": "content/01_journal/Chapter_1_Challenge.html#step-3---perform-k-means-clustering",
    "href": "content/01_journal/Chapter_1_Challenge.html#step-3---perform-k-means-clustering",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "\n5.3 Step 3 - Perform K-Means Clustering",
    "text": "5.3 Step 3 - Perform K-Means Clustering\nNext, we’ll perform K-Means clustering.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nstock_date_matrix_tbl <- read_rds(\"stock_date_matrix_tbl.rds\")\n\nBeginning with the stock_date_matrix_tbl, perform the following operations:\n\nDrop the non-numeric column, symbol\n\nPerform kmeans() with centers = 4 and nstart = 20\n\nSave the result as kmeans_obj\n\n\n\n# Create kmeans_obj for 4 centers\nkmeans_obj <- stock_date_matrix_tbl %>%\n  select(-symbol) %>%\n  kmeans(centers = 4, nstart = 20)\n\nUse glance() to get the tot.withinss.\n\n# Apply glance() to get the tot.withinss\n\ntot_withinss <- glance(kmeans_obj)$tot.withinss"
  },
  {
    "objectID": "content/01_journal/Chapter_1_Challenge.html#step-4---find-the-optimal-value-of-k",
    "href": "content/01_journal/Chapter_1_Challenge.html#step-4---find-the-optimal-value-of-k",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "\n5.4 Step 4 - Find the optimal value of K",
    "text": "5.4 Step 4 - Find the optimal value of K\nNow that we are familiar with the process for calculating kmeans(), let’s use purrr to iterate over many values of “k” using the centers argument.\nWe’ll use this custom function called kmeans_mapper():\n\nkmeans_mapper <- function(center = 3) {\n    stock_date_matrix_tbl %>%\n        select(-symbol) %>%\n        kmeans(centers = center, nstart = 20)\n}\n\nApply the kmeans_mapper() and glance() functions iteratively using purrr.\n\nCreate a tibble containing column called centers that go from 1 to 30\nAdd a column named k_means with the kmeans_mapper() output. Use mutate() to add the column and map() to map centers to the kmeans_mapper() function.\nAdd a column named glance with the glance() output. Use mutate() and map() again to iterate over the column of k_means.\nSave the output as k_means_mapped_tbl\n\n\n\n# Use purrr to map\n\nkmeans_mapper <- function(center) {\n  stock_date_matrix_tbl %>%\n    select(-symbol) %>%\n    kmeans(centers = center, nstart = 20)\n}\n\nk_means_mapped_tbl <- tibble(centers = 1:30) %>%\n  mutate(k_means = map(centers, kmeans_mapper),\n         glance = map(k_means, glance))\n\nk_means_mapped_tbl\n\n\n\n  \n\n\n# Output: k_means_mapped_tbl \n\nNext, let’s visualize the “tot.withinss” from the glance output as a Scree Plot.\n\nBegin with the k_means_mapped_tbl\n\nUnnest the glance column\nPlot the centers column (x-axis) versus the tot.withinss column (y-axis) using geom_point() and geom_line()\n\nAdd a title “Scree Plot” and feel free to style it with your favorite theme\n\n\n# Visualize Scree Plot\nscree_plot <- k_means_mapped_tbl %>%\n  unnest(glance) %>%\n  ggplot(aes(x = centers, y = tot.withinss)) +\n  geom_point() +\n  geom_line() +\n  labs(title = \"Scree Plot\") +\n  theme_tq()\n\nscree_plot\n\n\n\n\n\n\n\nWe can see that the Scree Plot becomes linear (constant rate of change) between 5 and 10 centers for K."
  },
  {
    "objectID": "content/01_journal/Chapter_1_Challenge.html#step-5---apply-umap",
    "href": "content/01_journal/Chapter_1_Challenge.html#step-5---apply-umap",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "\n5.5 Step 5 - Apply UMAP",
    "text": "5.5 Step 5 - Apply UMAP\nNext, let’s plot the UMAP 2D visualization to help us investigate cluster assignments.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nk_means_mapped_tbl <- read_rds(\"k_means_mapped_tbl.rds\")\n\nFirst, let’s apply the umap() function to the stock_date_matrix_tbl, which contains our user-item matrix in tibble format.\n\nStart with stock_date_matrix_tbl\n\nDe-select the symbol column\nUse the umap() function storing the output as umap_results\n\n\n\n# Apply UMAP\numap_results <- umap(stock_date_matrix_tbl[, -1])\n\n\n# Store results as: umap_results \n\nNext, we want to combine the layout from the umap_results with the symbol column from the stock_date_matrix_tbl.\n\nStart with umap_results$layout\n\nConvert from a matrix data type to a tibble with as_tibble()\n\nBind the columns of the umap tibble with the symbol column from the stock_date_matrix_tbl.\nSave the results as umap_results_tbl.\n\n\n# Convert umap results to tibble with symbols\numap_results_tbl <- as_tibble(umap_results$layout) %>%\n  bind_cols(symbol = stock_date_matrix_tbl$symbol)\n\n#> Warning: The `x` argument of `as_tibble.matrix()` must have unique column names if\n#> `.name_repair` is omitted as of tibble 2.0.0.\n#> ℹ Using compatibility `.name_repair`.\n\numap_results_tbl\n\n\n\n  \n\n\n# Output: umap_results_tbl\n\nFinally, let’s make a quick visualization of the umap_results_tbl.\n\nPipe the umap_results_tbl into ggplot() mapping the columns to x-axis and y-axis\nAdd a geom_point() geometry with an alpha = 0.5\n\nApply theme_tq() and add a title “UMAP Projection”\n\n\n# Visualize UMAP results\numap_plot <- umap_results_tbl %>%\n  ggplot(aes(x = V1, y = V2)) +\n  geom_point(alpha = 0.5) +\n  theme_tq() +\n  labs(title = \"UMAP Projection\")\n  \numap_plot\n\n\n\n\n\n\n\nWe can now see that we have some clusters. However, we still need to combine the K-Means clusters and the UMAP 2D representation."
  },
  {
    "objectID": "content/01_journal/Chapter_1_Challenge.html#step-6---combine-k-means-and-umap",
    "href": "content/01_journal/Chapter_1_Challenge.html#step-6---combine-k-means-and-umap",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "\n5.6 Step 6 - Combine K-Means and UMAP",
    "text": "5.6 Step 6 - Combine K-Means and UMAP\nNext, we combine the K-Means clusters and the UMAP 2D representation\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nk_means_mapped_tbl <- read_rds(\"k_means_mapped_tbl.rds\")\numap_results_tbl   <- read_rds(\"umap_results_tbl.rds\")\n\nFirst, pull out the K-Means for 10 Centers. Use this since beyond this value the Scree Plot flattens. Have a look at the business case to recall how that works.\n\n# Get the k_means_obj from the 10th center\nk_means_obj <- k_means_mapped_tbl$k_means[[10]]\n\n# Store as k_means_obj\n\nNext, we’ll combine the clusters from the k_means_obj with the umap_results_tbl.\n\nBegin with the k_means_obj\n\nAugment the k_means_obj with the stock_date_matrix_tbl to get the clusters added to the end of the tibble\nSelect just the symbol and .cluster columns\nLeft join the result with the umap_results_tbl by the symbol column\nLeft join the result with the result of sp_500_index_tbl %>% select(symbol, company, sector) by the symbol column.\nStore the output as umap_kmeans_results_tbl\n\n\n\n# Use your dplyr & broom skills to combine the k_means_obj with the umap_results_tbl\numap_kmeans_results_tbl <- k_means_obj %>%\n  augment(stock_date_matrix_tbl) %>%\n  select(symbol, .cluster) %>%\n  left_join(umap_results_tbl, by = \"symbol\") %>%\n  left_join(sp_500_index_tbl %>% select(symbol, company, sector), by = \"symbol\")\n\numap_kmeans_results_tbl\n\n\n\n  \n\n\n# Output: umap_kmeans_results_tbl \n\nPlot the K-Means and UMAP results.\n\nBegin with the umap_kmeans_results_tbl\n\nUse ggplot() mapping V1, V2 and color = .cluster\n\nAdd the geom_point() geometry with alpha = 0.5\n\nApply colors as you desire (e.g. scale_color_manual(values = palette_light() %>% rep(3)))\n\n\n# Visualize the combined K-Means and UMAP results\ncombined_plot <- umap_kmeans_results_tbl %>%\n  ggplot(aes(x = V1, y = V2, color = factor(.cluster))) +\n  geom_point(alpha = 0.5) +\n  scale_color_manual(values = palette_light() %>% rep(3)) +\n  theme_tq() +\n  labs(title = \"Combined K-Means and UMAP Results\")\n\ncombined_plot\n\n\n\n\n\n\n\nCongratulations! You are done with the 1st challenge!"
  },
  {
    "objectID": "content/01_journal/LIME.html",
    "href": "content/01_journal/LIME.html",
    "title": "05 LIME",
    "section": "",
    "text": "# LIME FEATURE EXPLANATION ----\n\n# 1. Setup ----\n\n# Load Libraries \nlibrary(tidymodels)\nlibrary(magrittr)\nlibrary(dplyr)\nlibrary(sjmisc)\nlibrary(magrittr)\nlibrary(haven)\nlibrary(sjlabelled)\nlibrary(rsample)\nlibrary(recipes)\nlibrary(rstanarm)\nlibrary(broom.mixed)\nlibrary(h2o)\nlibrary(readxl)\nlibrary(tidyverse)\nlibrary(tidyquant)\nlibrary(lime)\n\n\n# Load Data\nemployee_attrition_tbl <- read_csv(\"datasets-1067-1925-WA_Fn-UseC_-HR-Employee-Attrition.csv\")\n\n#> Rows: 1470 Columns: 35\n#> ── Column specification ────────────────────────────────────────────────────────\n#> Delimiter: \",\"\n#> chr  (9): Attrition, BusinessTravel, Department, EducationField, Gender, Job...\n#> dbl (26): Age, DailyRate, DistanceFromHome, Education, EmployeeCount, Employ...\n#> \n#> ℹ Use `spec()` to retrieve the full column specification for this data.\n#> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ndefinitions_raw_tbl    <- read_excel(\"data_definitions.xlsx\", sheet = 1, col_names = FALSE)\n\n#> New names:\n#> • `` -> `...1`\n#> • `` -> `...2`\n\n# Processing Pipeline\nsource(\"00_Scripts/data_processing_pipeline.R\")\n\nemployee_attrition_readable_tbl <- process_hr_data_readable(employee_attrition_tbl, definitions_raw_tbl)\n\n#> Joining with `by = join_by(Education)`\n#> Joining with `by = join_by(EnvironmentSatisfaction)`\n#> Joining with `by = join_by(JobInvolvement)`\n#> Joining with `by = join_by(JobSatisfaction)`\n#> Joining with `by = join_by(PerformanceRating)`\n#> Joining with `by = join_by(RelationshipSatisfaction)`\n#> Joining with `by = join_by(WorkLifeBalance)`\n\n# Split into test and train\nset.seed(seed = 1113)\nsplit_obj <- rsample::initial_split(employee_attrition_readable_tbl, prop = 0.85)\n\n# Assign training and test data\ntrain_readable_tbl <- training(split_obj)\ntest_readable_tbl  <- testing(split_obj)\n\n# ML Preprocessing Recipe \nrecipe_obj <- recipe(Attrition ~ ., data = train_readable_tbl) %>%\n  step_zv(all_predictors()) %>%\n  step_mutate_at(c(\"JobLevel\", \"StockOptionLevel\"), fn = as.factor) %>% \n  prep()\n\nrecipe_obj\n\n#> \n#> ── Recipe ──────────────────────────────────────────────────────────────────────\n#> \n#> ── Inputs \n#> Number of variables by role\n#> outcome:    1\n#> predictor: 34\n#> \n#> ── Training information \n#> Training data contained 1249 data points and no incomplete rows.\n#> \n#> ── Operations \n#> • Zero variance filter removed: EmployeeCount, Over18, StandardHours | Trained\n#> • Variable mutation for: JobLevel, StockOptionLevel | Trained\n\ntrain_tbl <- bake(recipe_obj, new_data = train_readable_tbl)\ntest_tbl  <- bake(recipe_obj, new_data = test_readable_tbl)\n\n\n# 2. Models ----\n\nh2o.init()\n\n#>  Connection successful!\n#> \n#> R is connected to the H2O cluster: \n#>     H2O cluster uptime:         1 hours 58 minutes \n#>     H2O cluster timezone:       Europe/Berlin \n#>     H2O data parsing timezone:  UTC \n#>     H2O cluster version:        3.40.0.1 \n#>     H2O cluster version age:    3 months and 13 days \n#>     H2O cluster name:           H2O_started_from_R_SHUBHAM_jag251 \n#>     H2O cluster total nodes:    1 \n#>     H2O cluster total memory:   1.03 GB \n#>     H2O cluster total cores:    8 \n#>     H2O cluster allowed cores:  8 \n#>     H2O cluster healthy:        TRUE \n#>     H2O Connection ip:          localhost \n#>     H2O Connection port:        54321 \n#>     H2O Connection proxy:       NA \n#>     H2O Internal Security:      FALSE \n#>     R Version:                  R version 4.3.0 (2023-04-21 ucrt)\n\n\n#> Warning in h2o.clusterInfo(): \n#> Your H2O cluster version is (3 months and 13 days) old. There may be a newer version available.\n#> Please download and install the latest version from: https://h2o-release.s3.amazonaws.com/h2o/latest_stable.html\n\n# Splitting the data for validation df\nsplit_h2o <- h2o.splitFrame(as.h2o(train_tbl), ratios = c(0.75), seed = 1234)\n\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\ntrain_h2o <- split_h2o[[1]]\nvalid_h2o <- split_h2o[[2]]\ntest_h2o  <- as.h2o(test_tbl)\n\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n# Predictors\ny <- \"EducationField\"\nx <- setdiff(names(train_h2o), y)\n\n# AutoML Model\nh2o_models_automl <- h2o.automl(\n  x = x,\n  y = y,\n  training_frame    = train_h2o,\n  validation_frame  = valid_h2o,\n  leaderboard_frame = test_h2o,\n  max_runtime_secs  = 120,\n  nfolds            = 5 \n)\n\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |=                                                                     |   1%\n#> 16:26:40.894: User specified a validation frame with cross-validation still enabled. Please note that the models will still be validated using cross-validation only, the validation frame will be used to provide purely informative validation metrics on the trained models.\n#> 16:26:40.903: AutoML: XGBoost is not available; skipping it.\n  |                                                                            \n  |==                                                                    |   3%\n  |                                                                            \n  |===                                                                   |   5%\n  |                                                                            \n  |====                                                                  |   6%\n  |                                                                            \n  |======                                                                |   8%\n  |                                                                            \n  |=======                                                               |  10%\n  |                                                                            \n  |=========                                                             |  12%\n  |                                                                            \n  |===========                                                           |  16%\n  |                                                                            \n  |============                                                          |  17%\n  |                                                                            \n  |=============                                                         |  19%\n  |                                                                            \n  |===============                                                       |  21%\n  |                                                                            \n  |================                                                      |  23%\n  |                                                                            \n  |=================                                                     |  25%\n  |                                                                            \n  |==================                                                    |  26%\n  |                                                                            \n  |====================                                                  |  28%\n  |                                                                            \n  |=====================                                                 |  30%\n  |                                                                            \n  |=======================                                               |  33%\n  |                                                                            \n  |========================                                              |  35%\n  |                                                                            \n  |==========================                                            |  37%\n  |                                                                            \n  |===========================                                           |  39%\n  |                                                                            \n  |============================                                          |  40%\n  |                                                                            \n  |=============================                                         |  42%\n  |                                                                            \n  |===============================                                       |  44%\n  |                                                                            \n  |================================                                      |  46%\n  |                                                                            \n  |=================================                                     |  47%\n  |                                                                            \n  |==================================                                    |  49%\n  |                                                                            \n  |====================================                                  |  51%\n  |                                                                            \n  |=====================================                                 |  52%\n  |                                                                            \n  |======================================                                |  54%\n  |                                                                            \n  |=======================================                               |  56%\n  |                                                                            \n  |=========================================                             |  58%\n  |                                                                            \n  |===========================================                           |  61%\n  |                                                                            \n  |============================================                          |  63%\n  |                                                                            \n  |==============================================                        |  65%\n  |                                                                            \n  |===============================================                       |  67%\n  |                                                                            \n  |================================================                      |  69%\n  |                                                                            \n  |==================================================                    |  71%\n  |                                                                            \n  |===================================================                   |  73%\n  |                                                                            \n  |=====================================================                 |  76%\n  |                                                                            \n  |======================================================                |  77%\n  |                                                                            \n  |========================================================              |  80%\n  |                                                                            \n  |=========================================================             |  82%\n  |                                                                            \n  |=============================================================         |  88%\n  |                                                                            \n  |===============================================================       |  90%\n  |                                                                            \n  |=================================================================     |  93%\n  |                                                                            \n  |==================================================================    |  94%\n  |                                                                            \n  |===================================================================   |  96%\n  |                                                                            \n  |===================================================================== |  98%\n  |                                                                            \n  |======================================================================| 100%\n\ntypeof(h2o_models_automl)\n\n#> [1] \"S4\"\n\nslotNames(h2o_models_automl)\n\n#> [1] \"project_name\"   \"leader\"         \"leaderboard\"    \"event_log\"     \n#> [5] \"modeling_steps\" \"training_info\"\n\nh2o_models_automl@leaderboard \n\n#>                                                   model_id mean_per_class_error\n#> 1            GBM_grid_1_AutoML_10_20230522_162640_model_16            0.6726087\n#> 2    DeepLearning_grid_1_AutoML_10_20230522_162640_model_1            0.7074879\n#> 3                 DeepLearning_1_AutoML_10_20230522_162640            0.7219876\n#> 4 StackedEnsemble_BestOfFamily_1_AutoML_10_20230522_162640            0.7224327\n#> 5 StackedEnsemble_BestOfFamily_4_AutoML_10_20230522_162640            0.7287578\n#> 6                          GBM_3_AutoML_10_20230522_162640            0.7303865\n#>    logloss      rmse       mse\n#> 1 1.423626 0.7151699 0.5114680\n#> 2 2.379320 0.7397175 0.5471820\n#> 3 1.333898 0.6929237 0.4801433\n#> 4 1.257405 0.6849897 0.4692108\n#> 5 1.258543 0.6855557 0.4699867\n#> 6 1.402123 0.7128368 0.5081363\n#> \n#> [40 rows x 5 columns]\n\nh2o_models_automl@leader\n\n#> Model Details:\n#> ==============\n#> \n#> H2OMultinomialModel: gbm\n#> Model ID:  GBM_grid_1_AutoML_10_20230522_162640_model_16 \n#> Model Summary: \n#>   number_of_trees number_of_internal_trees model_size_in_bytes min_depth\n#> 1              21                      126               71812         2\n#>   max_depth mean_depth min_leaves max_leaves mean_leaves\n#> 1        11   10.53968          3         46    40.58730\n#> \n#> \n#> H2OMultinomialMetrics: gbm\n#> ** Reported on training data. **\n#> \n#> Training Set Metrics: \n#> =====================\n#> \n#> Extract training frame with `h2o.getFrame(\"AutoML_10_20230522_162640_training_RTMP_sid_8255_5\")`\n#> MSE: (Extract with `h2o.mse`) 0.1333279\n#> RMSE: (Extract with `h2o.rmse`) 0.3651409\n#> Logloss: (Extract with `h2o.logloss`) 0.4433049\n#> Mean Per-Class Error: 0.004462694\n#> AUC: (Extract with `h2o.auc`) NaN\n#> AUCPR: (Extract with `h2o.aucpr`) NaN\n#> R^2: (Extract with `h2o.r2`) 0.924912\n#> Confusion Matrix: Extract with `h2o.confusionMatrix(<model>,train = TRUE)`)\n#> =========================================================================\n#> Confusion Matrix: Row labels: Actual class; Column labels: Predicted class\n#>                  Human Resources Life Sciences Marketing Medical Other\n#> Human Resources               17             0         0       0     0\n#> Life Sciences                  0           379         0       0     0\n#> Marketing                      0             0        94       0     0\n#> Medical                        0             0         1     307     0\n#> Other                          0             0         0       0    53\n#> Technical Degree               1             0         0       1     0\n#> Totals                        18           379        95     308    53\n#>                  Technical Degree  Error      Rate\n#> Human Resources                 0 0.0000 =  0 / 17\n#> Life Sciences                   0 0.0000 = 0 / 379\n#> Marketing                       0 0.0000 =  0 / 94\n#> Medical                         0 0.0032 = 1 / 308\n#> Other                           0 0.0000 =  0 / 53\n#> Technical Degree               83 0.0235 =  2 / 85\n#> Totals                         83 0.0032 = 3 / 936\n#> \n#> Hit Ratio Table: Extract with `h2o.hit_ratio_table(<model>,train = TRUE)`\n#> =======================================================================\n#> Top-6 Hit Ratios: \n#>   k hit_ratio\n#> 1 1  0.996795\n#> 2 2  1.000000\n#> 3 3  1.000000\n#> 4 4  1.000000\n#> 5 5  1.000000\n#> 6 6  1.000000\n#> \n#> \n#> \n#> \n#> H2OMultinomialMetrics: gbm\n#> ** Reported on validation data. **\n#> \n#> Validation Set Metrics: \n#> =====================\n#> \n#> Extract validation frame with `h2o.getFrame(\"RTMP_sid_8255_7\")`\n#> MSE: (Extract with `h2o.mse`) 0.4785402\n#> RMSE: (Extract with `h2o.rmse`) 0.691766\n#> Logloss: (Extract with `h2o.logloss`) 1.312942\n#> Mean Per-Class Error: 0.6671773\n#> AUC: (Extract with `h2o.auc`) NaN\n#> AUCPR: (Extract with `h2o.aucpr`) NaN\n#> R^2: (Extract with `h2o.r2`) 0.7237191\n#> Confusion Matrix: Extract with `h2o.confusionMatrix(<model>,valid = TRUE)`)\n#> =========================================================================\n#> Confusion Matrix: Row labels: Actual class; Column labels: Predicted class\n#>                  Human Resources Life Sciences Marketing Medical Other\n#> Human Resources                3             1         0       1     0\n#> Life Sciences                  3            84         8      46     1\n#> Marketing                      0            16        20       6     0\n#> Medical                        2            48         4      27     0\n#> Other                          0             9         1       5     0\n#> Technical Degree               0            17         3       7     0\n#> Totals                         8           175        36      92     1\n#>                  Technical Degree  Error        Rate\n#> Human Resources                 0 0.4000 =     2 / 5\n#> Life Sciences                   1 0.4126 =  59 / 143\n#> Marketing                       0 0.5238 =   22 / 42\n#> Medical                         0 0.6667 =   54 / 81\n#> Other                           0 1.0000 =   15 / 15\n#> Technical Degree                0 1.0000 =   27 / 27\n#> Totals                          1 0.5719 = 179 / 313\n#> \n#> Hit Ratio Table: Extract with `h2o.hit_ratio_table(<model>,valid = TRUE)`\n#> =======================================================================\n#> Top-6 Hit Ratios: \n#>   k hit_ratio\n#> 1 1  0.428115\n#> 2 2  0.785942\n#> 3 3  0.913738\n#> 4 4  0.987220\n#> 5 5  1.000000\n#> 6 6  1.000000\n#> \n#> \n#> \n#> \n#> H2OMultinomialMetrics: gbm\n#> ** Reported on cross-validation data. **\n#> ** 5-fold cross-validation on training data (Metrics computed for combined holdout predictions) **\n#> \n#> Cross-Validation Set Metrics: \n#> =====================\n#> \n#> Extract cross-validation frame with `h2o.getFrame(\"AutoML_10_20230522_162640_training_RTMP_sid_8255_5\")`\n#> MSE: (Extract with `h2o.mse`) 0.5114157\n#> RMSE: (Extract with `h2o.rmse`) 0.7151333\n#> Logloss: (Extract with `h2o.logloss`) 1.426057\n#> Mean Per-Class Error: 0.7136365\n#> AUC: (Extract with `h2o.auc`) NaN\n#> AUCPR: (Extract with `h2o.aucpr`) NaN\n#> R^2: (Extract with `h2o.r2`) 0.7119795\n#> Hit Ratio Table: Extract with `h2o.hit_ratio_table(<model>,xval = TRUE)`\n#> =======================================================================\n#> Top-6 Hit Ratios: \n#>   k hit_ratio\n#> 1 1  0.361111\n#> 2 2  0.729701\n#> 3 3  0.882479\n#> 4 4  0.974359\n#> 5 5  1.000000\n#> 6 6  1.000000\n#> \n#> \n#> \n#> \n#> Cross-Validation Metrics Summary: \n#>                               mean       sd cv_1_valid cv_2_valid cv_3_valid\n#> accuracy                  0.365349 0.040556   0.398936   0.342246   0.304813\n#> auc                             NA 0.000000         NA         NA         NA\n#> err                       0.634651 0.040556   0.601064   0.657754   0.695187\n#> err_count               118.800000 7.463243 113.000000 123.000000 130.000000\n#> logloss                   1.464532 0.059755   1.390745   1.465573   1.538454\n#> max_per_class_error       1.000000 0.000000   1.000000   1.000000   1.000000\n#> mean_per_class_accuracy   0.289173 0.083701   0.409676   0.261199   0.180853\n#> mean_per_class_error      0.710827 0.083701   0.590324   0.738801   0.819147\n#> mse                       0.502282 0.016316   0.481327   0.505902   0.523910\n#> pr_auc                          NA 0.000000         NA         NA         NA\n#> r2                        0.712497 0.033429   0.753934   0.729778   0.665303\n#> rmse                      0.708644 0.011513   0.693778   0.711268   0.723817\n#>                         cv_4_valid cv_5_valid\n#> accuracy                  0.390374   0.390374\n#> auc                             NA         NA\n#> err                       0.609626   0.609626\n#> err_count               114.000000 114.000000\n#> logloss                   1.422885   1.505004\n#> max_per_class_error       1.000000   1.000000\n#> mean_per_class_accuracy   0.317832   0.276303\n#> mean_per_class_error      0.682168   0.723697\n#> mse                       0.491899   0.508370\n#> pr_auc                          NA         NA\n#> r2                        0.697768   0.715701\n#> rmse                      0.701355   0.713001\n\n\n\n#h2o.getModel(\"StackedEnsemble_BestOfFamily_2_AutoML_9_20230522_161922\") %>% \n#  h2o.saveModel(path = \"h20_models/\")\nautoml_leader <- h2o.loadModel(\"h20_models/StackedEnsemble_BestOfFamily_2_AutoML_9_20230522_161922\")\nautoml_leader\n\n#> Model Details:\n#> ==============\n#> \n#> H2OMultinomialModel: stackedensemble\n#> Model ID:  StackedEnsemble_BestOfFamily_2_AutoML_9_20230522_161922 \n#> Model Summary for Stacked Ensemble: \n#>                                     key            value\n#> 1                     Stacking strategy cross_validation\n#> 2  Number of base models (used / total)              3/3\n#> 3      # GBM base models (used / total)              1/1\n#> 4      # GLM base models (used / total)              1/1\n#> 5      # DRF base models (used / total)              1/1\n#> 6                 Metalearner algorithm              GLM\n#> 7    Metalearner fold assignment scheme           Random\n#> 8                    Metalearner nfolds                5\n#> 9               Metalearner fold_column               NA\n#> 10   Custom metalearner hyperparameters             None\n#> \n#> \n#> H2OMultinomialMetrics: stackedensemble\n#> ** Reported on training data. **\n#> \n#> Training Set Metrics: \n#> =====================\n#> \n#> Extract training frame with `h2o.getFrame(\"AutoML_9_20230522_161922_training_RTMP_sid_8ca6_484\")`\n#> MSE: (Extract with `h2o.mse`) 0.510827\n#> RMSE: (Extract with `h2o.rmse`) 0.7147216\n#> Logloss: (Extract with `h2o.logloss`) 1.393004\n#> Mean Per-Class Error: 0.6345646\n#> AUC: (Extract with `h2o.auc`) NaN\n#> AUCPR: (Extract with `h2o.aucpr`) NaN\n#> Null Deviance: (Extract with `h2o.nulldeviance`) 2650.54\n#> Residual Deviance: (Extract with `h2o.residual_deviance`) 2607.704\n#> AIC: (Extract with `h2o.aic`) NaN\n#> Confusion Matrix: Extract with `h2o.confusionMatrix(<model>,train = TRUE)`)\n#> =========================================================================\n#> Confusion Matrix: Row labels: Actual class; Column labels: Predicted class\n#>                  Human Resources Life Sciences Marketing Medical Other\n#> Human Resources               17             0         0       0     0\n#> Life Sciences                  2            73        25     279     0\n#> Marketing                      0             0        94       0     0\n#> Medical                        0           308         0       0     0\n#> Other                          0            53         0       0     0\n#> Technical Degree               0            85         0       0     0\n#> Totals                        19           519       119     279     0\n#>                  Technical Degree  Error        Rate\n#> Human Resources                 0 0.0000 =    0 / 17\n#> Life Sciences                   0 0.8074 = 306 / 379\n#> Marketing                       0 0.0000 =    0 / 94\n#> Medical                         0 1.0000 = 308 / 308\n#> Other                           0 1.0000 =   53 / 53\n#> Technical Degree                0 1.0000 =   85 / 85\n#> Totals                          0 0.8034 = 752 / 936\n#> \n#> Hit Ratio Table: Extract with `h2o.hit_ratio_table(<model>,train = TRUE)`\n#> =======================================================================\n#> Top-6 Hit Ratios: \n#>   k hit_ratio\n#> 1 1  0.196581\n#> 2 2  0.834402\n#> 3 3  0.857906\n#> 4 4  0.972222\n#> 5 5  1.000000\n#> 6 6  1.000000\n#> \n#> \n#> \n#> \n#> H2OMultinomialMetrics: stackedensemble\n#> ** Reported on validation data. **\n#> \n#> Validation Set Metrics: \n#> =====================\n#> \n#> MSE: (Extract with `h2o.mse`) 0.4553251\n#> RMSE: (Extract with `h2o.rmse`) 0.6747778\n#> Logloss: (Extract with `h2o.logloss`) 1.216041\n#> Mean Per-Class Error: 0.7542303\n#> AUC: (Extract with `h2o.auc`) NaN\n#> AUCPR: (Extract with `h2o.aucpr`) NaN\n#> Null Deviance: (Extract with `h2o.nulldeviance`) 887.4589\n#> Residual Deviance: (Extract with `h2o.residual_deviance`) 761.2415\n#> AIC: (Extract with `h2o.aic`) NaN\n#> Confusion Matrix: Extract with `h2o.confusionMatrix(<model>,valid = TRUE)`)\n#> =========================================================================\n#> Confusion Matrix: Row labels: Actual class; Column labels: Predicted class\n#>                  Human Resources Life Sciences Marketing Medical Other\n#> Human Resources                0             4         0       1     0\n#> Life Sciences                  2            97         8      36     0\n#> Marketing                      0            21        21       0     0\n#> Medical                        2            48         7      24     0\n#> Other                          1            12         0       2     0\n#> Technical Degree               0            16         3       8     0\n#> Totals                         5           198        39      71     0\n#>                  Technical Degree  Error        Rate\n#> Human Resources                 0 1.0000 =     5 / 5\n#> Life Sciences                   0 0.3217 =  46 / 143\n#> Marketing                       0 0.5000 =   21 / 42\n#> Medical                         0 0.7037 =   57 / 81\n#> Other                           0 1.0000 =   15 / 15\n#> Technical Degree                0 1.0000 =   27 / 27\n#> Totals                          0 0.5463 = 171 / 313\n#> \n#> Hit Ratio Table: Extract with `h2o.hit_ratio_table(<model>,valid = TRUE)`\n#> =======================================================================\n#> Top-6 Hit Ratios: \n#>   k hit_ratio\n#> 1 1  0.453674\n#> 2 2  0.776358\n#> 3 3  0.923323\n#> 4 4  0.984025\n#> 5 5  0.996805\n#> 6 6  1.000000\n#> \n#> \n#> \n#> \n#> H2OMultinomialMetrics: stackedensemble\n#> ** Reported on cross-validation data. **\n#> ** 5-fold cross-validation on training data (Metrics computed for combined holdout predictions) **\n#> \n#> Cross-Validation Set Metrics: \n#> =====================\n#> \n#> Extract cross-validation frame with `h2o.getFrame(\"levelone_training_StackedEnsemble_BestOfFamily_2_AutoML_9_20230522_161922\")`\n#> MSE: (Extract with `h2o.mse`) 0.4781164\n#> RMSE: (Extract with `h2o.rmse`) 0.6914596\n#> Logloss: (Extract with `h2o.logloss`) 1.28386\n#> Mean Per-Class Error: 0.7958728\n#> AUC: (Extract with `h2o.auc`) NaN\n#> AUCPR: (Extract with `h2o.aucpr`) NaN\n#> Null Deviance: (Extract with `h2o.nulldeviance`) 2665.814\n#> Residual Deviance: (Extract with `h2o.residual_deviance`) 2403.386\n#> AIC: (Extract with `h2o.aic`) NaN\n#> Hit Ratio Table: Extract with `h2o.hit_ratio_table(<model>,xval = TRUE)`\n#> =======================================================================\n#> Top-6 Hit Ratios: \n#>   k hit_ratio\n#> 1 1  0.357906\n#> 2 2  0.766026\n#> 3 3  0.916667\n#> 4 4  0.983974\n#> 5 5  0.998932\n#> 6 6  1.000000\n#> \n#> \n#> \n#> \n#> Cross-Validation Metrics Summary: \n#>                               mean        sd cv_1_valid cv_2_valid cv_3_valid\n#> accuracy                  0.378927  0.040100   0.431818   0.406091   0.329949\n#> auc                             NA  0.000000         NA         NA         NA\n#> err                       0.621073  0.040100   0.568182   0.593909   0.670051\n#> err_count               116.400000 11.326959 100.000000 117.000000 132.000000\n#> logloss                   1.275258  0.079077   1.150855   1.328194   1.336792\n#> max_per_class_error       1.000000  0.000000   1.000000   1.000000   1.000000\n#> mean_per_class_accuracy   0.223246  0.095029   0.390653   0.177277   0.208973\n#> mean_per_class_error      0.776755  0.095029   0.609347   0.822723   0.791027\n#> mse                       0.475527  0.023846   0.437742   0.492536   0.489894\n#> null_deviance           533.162800 53.754982 461.965500 558.513240 606.962460\n#> pr_auc                          NA  0.000000         NA         NA         NA\n#> r2                        0.727629  0.022276   0.730363   0.757930   0.737877\n#> residual_deviance       478.445920 50.753906 405.101000 523.308350 526.696100\n#> rmse                      0.689407  0.017472   0.661621   0.701809   0.699924\n#>                         cv_4_valid cv_5_valid\n#> accuracy                  0.366120   0.360656\n#> auc                             NA         NA\n#> err                       0.633880   0.639344\n#> err_count               116.000000 117.000000\n#> logloss                   1.242156   1.318293\n#> max_per_class_error       1.000000   1.000000\n#> mean_per_class_accuracy   0.174012   0.165314\n#> mean_per_class_error      0.825989   0.834686\n#> mse                       0.465874   0.491589\n#> null_deviance           516.993400 521.379330\n#> pr_auc                          NA         NA\n#> r2                        0.708957   0.703020\n#> residual_deviance       454.628940 482.495180\n#> rmse                      0.682550   0.701134\n\n\n\n# 3. LIME ----\n\n# 3.1 Making Predictions ----\n#\npredictions_tbl <- automl_leader %>% \n     h2o.predict(newdata = as.h2o(test_tbl)) %>%\n     as.tibble() %>%\n     bind_cols(\n         test_tbl %>%\n             select(EducationField)\n     )\n\n#> Warning: `as.tibble()` was deprecated in tibble 2.0.0.\n#> ℹ Please use `as_tibble()` instead.\n#> ℹ The signature and semantics have changed, see `?as_tibble`.\n\n\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n predictions_tbl\n\n\n\n  \n\n\n test_tbl %>%\n   slice(1) %>%\n   glimpse()\n\n#> Rows: 1\n#> Columns: 32\n#> $ Age                      <dbl> 59\n#> $ BusinessTravel           <fct> Travel_Rarely\n#> $ DailyRate                <dbl> 1324\n#> $ Department               <fct> Research & Development\n#> $ DistanceFromHome         <dbl> 3\n#> $ Education                <fct> Bachelor\n#> $ EducationField           <fct> Medical\n#> $ EmployeeNumber           <dbl> 10\n#> $ EnvironmentSatisfaction  <fct> High\n#> $ Gender                   <fct> Female\n#> $ HourlyRate               <dbl> 81\n#> $ JobInvolvement           <fct> Very High\n#> $ JobLevel                 <fct> 1\n#> $ JobRole                  <fct> Laboratory Technician\n#> $ JobSatisfaction          <fct> Low\n#> $ MaritalStatus            <fct> Married\n#> $ MonthlyIncome            <dbl> 2670\n#> $ MonthlyRate              <dbl> 9964\n#> $ NumCompaniesWorked       <dbl> 4\n#> $ OverTime                 <fct> Yes\n#> $ PercentSalaryHike        <dbl> 20\n#> $ PerformanceRating        <fct> Outstanding\n#> $ RelationshipSatisfaction <fct> Low\n#> $ StockOptionLevel         <fct> 3\n#> $ TotalWorkingYears        <dbl> 12\n#> $ TrainingTimesLastYear    <dbl> 3\n#> $ WorkLifeBalance          <fct> Good\n#> $ YearsAtCompany           <dbl> 1\n#> $ YearsInCurrentRole       <dbl> 0\n#> $ YearsSinceLastPromotion  <dbl> 0\n#> $ YearsWithCurrManager     <dbl> 0\n#> $ Attrition                <fct> No\n\n\n\n# 3.2 Single Explanation ----\n\n explainer <- train_tbl %>%\n   select(-Attrition) %>%\n   lime(\n     model           = automl_leader,\n     bin_continuous  = TRUE,\n     n_bins          = 4,\n     quantile_bins   = TRUE\n   )\n \n explainer\n\n#> $model\n#> Model Details:\n#> ==============\n#> \n#> H2OMultinomialModel: stackedensemble\n#> Model ID:  StackedEnsemble_BestOfFamily_2_AutoML_9_20230522_161922 \n#> Model Summary for Stacked Ensemble: \n#>                                     key            value\n#> 1                     Stacking strategy cross_validation\n#> 2  Number of base models (used / total)              3/3\n#> 3      # GBM base models (used / total)              1/1\n#> 4      # GLM base models (used / total)              1/1\n#> 5      # DRF base models (used / total)              1/1\n#> 6                 Metalearner algorithm              GLM\n#> 7    Metalearner fold assignment scheme           Random\n#> 8                    Metalearner nfolds                5\n#> 9               Metalearner fold_column               NA\n#> 10   Custom metalearner hyperparameters             None\n#> \n#> \n#> H2OMultinomialMetrics: stackedensemble\n#> ** Reported on training data. **\n#> \n#> Training Set Metrics: \n#> =====================\n#> \n#> Extract training frame with `h2o.getFrame(\"AutoML_9_20230522_161922_training_RTMP_sid_8ca6_484\")`\n#> MSE: (Extract with `h2o.mse`) 0.510827\n#> RMSE: (Extract with `h2o.rmse`) 0.7147216\n#> Logloss: (Extract with `h2o.logloss`) 1.393004\n#> Mean Per-Class Error: 0.6345646\n#> AUC: (Extract with `h2o.auc`) NaN\n#> AUCPR: (Extract with `h2o.aucpr`) NaN\n#> Null Deviance: (Extract with `h2o.nulldeviance`) 2650.54\n#> Residual Deviance: (Extract with `h2o.residual_deviance`) 2607.704\n#> AIC: (Extract with `h2o.aic`) NaN\n#> Confusion Matrix: Extract with `h2o.confusionMatrix(<model>,train = TRUE)`)\n#> =========================================================================\n#> Confusion Matrix: Row labels: Actual class; Column labels: Predicted class\n#>                  Human Resources Life Sciences Marketing Medical Other\n#> Human Resources               17             0         0       0     0\n#> Life Sciences                  2            73        25     279     0\n#> Marketing                      0             0        94       0     0\n#> Medical                        0           308         0       0     0\n#> Other                          0            53         0       0     0\n#> Technical Degree               0            85         0       0     0\n#> Totals                        19           519       119     279     0\n#>                  Technical Degree  Error        Rate\n#> Human Resources                 0 0.0000 =    0 / 17\n#> Life Sciences                   0 0.8074 = 306 / 379\n#> Marketing                       0 0.0000 =    0 / 94\n#> Medical                         0 1.0000 = 308 / 308\n#> Other                           0 1.0000 =   53 / 53\n#> Technical Degree                0 1.0000 =   85 / 85\n#> Totals                          0 0.8034 = 752 / 936\n#> \n#> Hit Ratio Table: Extract with `h2o.hit_ratio_table(<model>,train = TRUE)`\n#> =======================================================================\n#> Top-6 Hit Ratios: \n#>   k hit_ratio\n#> 1 1  0.196581\n#> 2 2  0.834402\n#> 3 3  0.857906\n#> 4 4  0.972222\n#> 5 5  1.000000\n#> 6 6  1.000000\n#> \n#> \n#> \n#> \n#> H2OMultinomialMetrics: stackedensemble\n#> ** Reported on validation data. **\n#> \n#> Validation Set Metrics: \n#> =====================\n#> \n#> MSE: (Extract with `h2o.mse`) 0.4553251\n#> RMSE: (Extract with `h2o.rmse`) 0.6747778\n#> Logloss: (Extract with `h2o.logloss`) 1.216041\n#> Mean Per-Class Error: 0.7542303\n#> AUC: (Extract with `h2o.auc`) NaN\n#> AUCPR: (Extract with `h2o.aucpr`) NaN\n#> Null Deviance: (Extract with `h2o.nulldeviance`) 887.4589\n#> Residual Deviance: (Extract with `h2o.residual_deviance`) 761.2415\n#> AIC: (Extract with `h2o.aic`) NaN\n#> Confusion Matrix: Extract with `h2o.confusionMatrix(<model>,valid = TRUE)`)\n#> =========================================================================\n#> Confusion Matrix: Row labels: Actual class; Column labels: Predicted class\n#>                  Human Resources Life Sciences Marketing Medical Other\n#> Human Resources                0             4         0       1     0\n#> Life Sciences                  2            97         8      36     0\n#> Marketing                      0            21        21       0     0\n#> Medical                        2            48         7      24     0\n#> Other                          1            12         0       2     0\n#> Technical Degree               0            16         3       8     0\n#> Totals                         5           198        39      71     0\n#>                  Technical Degree  Error        Rate\n#> Human Resources                 0 1.0000 =     5 / 5\n#> Life Sciences                   0 0.3217 =  46 / 143\n#> Marketing                       0 0.5000 =   21 / 42\n#> Medical                         0 0.7037 =   57 / 81\n#> Other                           0 1.0000 =   15 / 15\n#> Technical Degree                0 1.0000 =   27 / 27\n#> Totals                          0 0.5463 = 171 / 313\n#> \n#> Hit Ratio Table: Extract with `h2o.hit_ratio_table(<model>,valid = TRUE)`\n#> =======================================================================\n#> Top-6 Hit Ratios: \n#>   k hit_ratio\n#> 1 1  0.453674\n#> 2 2  0.776358\n#> 3 3  0.923323\n#> 4 4  0.984025\n#> 5 5  0.996805\n#> 6 6  1.000000\n#> \n#> \n#> \n#> \n#> H2OMultinomialMetrics: stackedensemble\n#> ** Reported on cross-validation data. **\n#> ** 5-fold cross-validation on training data (Metrics computed for combined holdout predictions) **\n#> \n#> Cross-Validation Set Metrics: \n#> =====================\n#> \n#> Extract cross-validation frame with `h2o.getFrame(\"levelone_training_StackedEnsemble_BestOfFamily_2_AutoML_9_20230522_161922\")`\n#> MSE: (Extract with `h2o.mse`) 0.4781164\n#> RMSE: (Extract with `h2o.rmse`) 0.6914596\n#> Logloss: (Extract with `h2o.logloss`) 1.28386\n#> Mean Per-Class Error: 0.7958728\n#> AUC: (Extract with `h2o.auc`) NaN\n#> AUCPR: (Extract with `h2o.aucpr`) NaN\n#> Null Deviance: (Extract with `h2o.nulldeviance`) 2665.814\n#> Residual Deviance: (Extract with `h2o.residual_deviance`) 2403.386\n#> AIC: (Extract with `h2o.aic`) NaN\n#> Hit Ratio Table: Extract with `h2o.hit_ratio_table(<model>,xval = TRUE)`\n#> =======================================================================\n#> Top-6 Hit Ratios: \n#>   k hit_ratio\n#> 1 1  0.357906\n#> 2 2  0.766026\n#> 3 3  0.916667\n#> 4 4  0.983974\n#> 5 5  0.998932\n#> 6 6  1.000000\n#> \n#> \n#> \n#> \n#> Cross-Validation Metrics Summary: \n#>                               mean        sd cv_1_valid cv_2_valid cv_3_valid\n#> accuracy                  0.378927  0.040100   0.431818   0.406091   0.329949\n#> auc                             NA  0.000000         NA         NA         NA\n#> err                       0.621073  0.040100   0.568182   0.593909   0.670051\n#> err_count               116.400000 11.326959 100.000000 117.000000 132.000000\n#> logloss                   1.275258  0.079077   1.150855   1.328194   1.336792\n#> max_per_class_error       1.000000  0.000000   1.000000   1.000000   1.000000\n#> mean_per_class_accuracy   0.223246  0.095029   0.390653   0.177277   0.208973\n#> mean_per_class_error      0.776755  0.095029   0.609347   0.822723   0.791027\n#> mse                       0.475527  0.023846   0.437742   0.492536   0.489894\n#> null_deviance           533.162800 53.754982 461.965500 558.513240 606.962460\n#> pr_auc                          NA  0.000000         NA         NA         NA\n#> r2                        0.727629  0.022276   0.730363   0.757930   0.737877\n#> residual_deviance       478.445920 50.753906 405.101000 523.308350 526.696100\n#> rmse                      0.689407  0.017472   0.661621   0.701809   0.699924\n#>                         cv_4_valid cv_5_valid\n#> accuracy                  0.366120   0.360656\n#> auc                             NA         NA\n#> err                       0.633880   0.639344\n#> err_count               116.000000 117.000000\n#> logloss                   1.242156   1.318293\n#> max_per_class_error       1.000000   1.000000\n#> mean_per_class_accuracy   0.174012   0.165314\n#> mean_per_class_error      0.825989   0.834686\n#> mse                       0.465874   0.491589\n#> null_deviance           516.993400 521.379330\n#> pr_auc                          NA         NA\n#> r2                        0.708957   0.703020\n#> residual_deviance       454.628940 482.495180\n#> rmse                      0.682550   0.701134\n#> \n#> $preprocess\n#> function (x) \n#> x\n#> <bytecode: 0x0000024d5372f1e8>\n#> <environment: 0x0000024d537229e0>\n#> \n#> $bin_continuous\n#> [1] TRUE\n#> \n#> $n_bins\n#> [1] 4\n#> \n#> $quantile_bins\n#> [1] TRUE\n#> \n#> $use_density\n#> [1] TRUE\n#> \n#> $feature_type\n#>                      Age           BusinessTravel                DailyRate \n#>                \"numeric\"                 \"factor\"                \"numeric\" \n#>               Department         DistanceFromHome                Education \n#>                 \"factor\"                \"numeric\"                 \"factor\" \n#>           EducationField           EmployeeNumber  EnvironmentSatisfaction \n#>                 \"factor\"                \"numeric\"                 \"factor\" \n#>                   Gender               HourlyRate           JobInvolvement \n#>                 \"factor\"                \"numeric\"                 \"factor\" \n#>                 JobLevel                  JobRole          JobSatisfaction \n#>                 \"factor\"                 \"factor\"                 \"factor\" \n#>            MaritalStatus            MonthlyIncome              MonthlyRate \n#>                 \"factor\"                \"numeric\"                \"numeric\" \n#>       NumCompaniesWorked                 OverTime        PercentSalaryHike \n#>                \"numeric\"                 \"factor\"                \"numeric\" \n#>        PerformanceRating RelationshipSatisfaction         StockOptionLevel \n#>                 \"factor\"                 \"factor\"                 \"factor\" \n#>        TotalWorkingYears    TrainingTimesLastYear          WorkLifeBalance \n#>                \"numeric\"                \"numeric\"                 \"factor\" \n#>           YearsAtCompany       YearsInCurrentRole  YearsSinceLastPromotion \n#>                \"numeric\"                \"numeric\"                \"numeric\" \n#>     YearsWithCurrManager \n#>                \"numeric\" \n#> \n#> $bin_cuts\n#> $bin_cuts$Age\n#>   0%  25%  50%  75% 100% \n#>   18   30   36   43   60 \n#> \n#> $bin_cuts$BusinessTravel\n#> NULL\n#> \n#> $bin_cuts$DailyRate\n#>   0%  25%  50%  75% 100% \n#>  102  465  797 1147 1499 \n#> \n#> $bin_cuts$Department\n#> NULL\n#> \n#> $bin_cuts$DistanceFromHome\n#>   0%  25%  50%  75% 100% \n#>    1    2    7   14   29 \n#> \n#> $bin_cuts$Education\n#> NULL\n#> \n#> $bin_cuts$EducationField\n#> NULL\n#> \n#> $bin_cuts$EmployeeNumber\n#>   0%  25%  50%  75% 100% \n#>    1  511 1040 1573 2065 \n#> \n#> $bin_cuts$EnvironmentSatisfaction\n#> NULL\n#> \n#> $bin_cuts$Gender\n#> NULL\n#> \n#> $bin_cuts$HourlyRate\n#>   0%  25%  50%  75% 100% \n#>   30   49   66   83  100 \n#> \n#> $bin_cuts$JobInvolvement\n#> NULL\n#> \n#> $bin_cuts$JobLevel\n#> NULL\n#> \n#> $bin_cuts$JobRole\n#> NULL\n#> \n#> $bin_cuts$JobSatisfaction\n#> NULL\n#> \n#> $bin_cuts$MaritalStatus\n#> NULL\n#> \n#> $bin_cuts$MonthlyIncome\n#>    0%   25%   50%   75%  100% \n#>  1051  2929  4908  8474 19999 \n#> \n#> $bin_cuts$MonthlyRate\n#>    0%   25%   50%   75%  100% \n#>  2094  8423 14470 20689 26968 \n#> \n#> $bin_cuts$NumCompaniesWorked\n#>   0%  25%  50%  75% 100% \n#>    0    1    2    4    9 \n#> \n#> $bin_cuts$OverTime\n#> NULL\n#> \n#> $bin_cuts$PercentSalaryHike\n#>   0%  25%  50%  75% 100% \n#>   11   12   14   18   25 \n#> \n#> $bin_cuts$PerformanceRating\n#> NULL\n#> \n#> $bin_cuts$RelationshipSatisfaction\n#> NULL\n#> \n#> $bin_cuts$StockOptionLevel\n#> NULL\n#> \n#> $bin_cuts$TotalWorkingYears\n#>   0%  25%  50%  75% 100% \n#>    0    6   10   15   38 \n#> \n#> $bin_cuts$TrainingTimesLastYear\n#>   0%  25%  50% 100% \n#>    0    2    3    6 \n#> \n#> $bin_cuts$WorkLifeBalance\n#> NULL\n#> \n#> $bin_cuts$YearsAtCompany\n#>   0%  25%  50%  75% 100% \n#>    0    3    5    9   37 \n#> \n#> $bin_cuts$YearsInCurrentRole\n#>   0%  25%  50%  75% 100% \n#>    0    2    3    7   18 \n#> \n#> $bin_cuts$YearsSinceLastPromotion\n#>   0%  50%  75% 100% \n#>    0    1    2   15 \n#> \n#> $bin_cuts$YearsWithCurrManager\n#>   0%  25%  50%  75% 100% \n#>    0    2    3    7   17 \n#> \n#> \n#> $feature_distribution\n#> $feature_distribution$Age\n#> \n#>         1         2         3         4 \n#> 0.2602082 0.2834267 0.2217774 0.2345877 \n#> \n#> $feature_distribution$BusinessTravel\n#> \n#>        Non-Travel Travel_Frequently     Travel_Rarely \n#>         0.1000801         0.1817454         0.7181745 \n#> \n#> $feature_distribution$DailyRate\n#> \n#>         1         2         3         4 \n#> 0.2514011 0.2489992 0.2497998 0.2497998 \n#> \n#> $feature_distribution$Department\n#> \n#>        Human Resources Research & Development                  Sales \n#>             0.04323459             0.65092074             0.30584468 \n#> \n#> $feature_distribution$DistanceFromHome\n#> \n#>         1         2         3         4 \n#> 0.2954363 0.2369896 0.2241793 0.2433947 \n#> \n#> $feature_distribution$Education\n#> \n#> Below College       College      Bachelor        Master        Doctor \n#>    0.11689351    0.18895116    0.38510809    0.27461970    0.03442754 \n#> \n#> $feature_distribution$EducationField\n#> \n#>  Human Resources    Life Sciences        Marketing          Medical \n#>       0.01761409       0.41793435       0.10888711       0.31144916 \n#>            Other Technical Degree \n#>       0.05444355       0.08967174 \n#> \n#> $feature_distribution$EmployeeNumber\n#> \n#>         1         2         3         4 \n#> 0.2506005 0.2497998 0.2497998 0.2497998 \n#> \n#> $feature_distribution$EnvironmentSatisfaction\n#> \n#>       Low    Medium      High Very High \n#> 0.1913531 0.1961569 0.3018415 0.3106485 \n#> \n#> $feature_distribution$Gender\n#> \n#>    Female      Male \n#> 0.4123299 0.5876701 \n#> \n#> $feature_distribution$HourlyRate\n#> \n#>         1         2         3         4 \n#> 0.2618094 0.2473979 0.2449960 0.2457966 \n#> \n#> $feature_distribution$JobInvolvement\n#> \n#>        Low     Medium       High  Very High \n#> 0.05684548 0.25780624 0.58927142 0.09607686 \n#> \n#> $feature_distribution$JobLevel\n#> \n#>          1          2          3          4          5 \n#> 0.36829464 0.36509207 0.14651721 0.07526021 0.04483587 \n#> \n#> $feature_distribution$JobRole\n#> \n#> Healthcare Representative           Human Resources     Laboratory Technician \n#>                0.08646918                0.03682946                0.18174540 \n#>                   Manager    Manufacturing Director         Research Director \n#>                0.06885508                0.09927942                0.05924740 \n#>        Research Scientist           Sales Executive      Sales Representative \n#>                0.18654924                0.22337870                0.05764612 \n#> \n#> $feature_distribution$JobSatisfaction\n#> \n#>       Low    Medium      High Very High \n#> 0.1873499 0.1985588 0.3018415 0.3122498 \n#> \n#> $feature_distribution$MaritalStatus\n#> \n#>  Divorced   Married    Single \n#> 0.2121697 0.4571657 0.3306645 \n#> \n#> $feature_distribution$MonthlyIncome\n#> \n#>         1         2         3         4 \n#> 0.2506005 0.2497998 0.2497998 0.2497998 \n#> \n#> $feature_distribution$MonthlyRate\n#> \n#>         1         2         3         4 \n#> 0.2506005 0.2497998 0.2497998 0.2497998 \n#> \n#> $feature_distribution$NumCompaniesWorked\n#> \n#>          1          2          3          4 \n#> 0.48118495 0.09927942 0.20496397 0.21457166 \n#> \n#> $feature_distribution$OverTime\n#> \n#>        No       Yes \n#> 0.7165733 0.2834267 \n#> \n#> $feature_distribution$PercentSalaryHike\n#> \n#>         1         2         3         4 \n#> 0.2866293 0.2738191 0.2289832 0.2105685 \n#> \n#> $feature_distribution$PerformanceRating\n#> \n#>         Low        Good   Excellent Outstanding \n#>   0.0000000   0.0000000   0.8414732   0.1585268 \n#> \n#> $feature_distribution$RelationshipSatisfaction\n#> \n#>       Low    Medium      High Very High \n#> 0.1889512 0.2161729 0.3018415 0.2930344 \n#> \n#> $feature_distribution$StockOptionLevel\n#> \n#>          0          1          2          3 \n#> 0.43554844 0.40592474 0.10168135 0.05684548 \n#> \n#> $feature_distribution$TotalWorkingYears\n#> \n#>         1         2         3         4 \n#> 0.3050440 0.3306645 0.1224980 0.2417934 \n#> \n#> $feature_distribution$TrainingTimesLastYear\n#> \n#>         1         2         3 \n#> 0.4603683 0.3306645 0.2089672 \n#> \n#> $feature_distribution$WorkLifeBalance\n#> \n#>        Bad       Good     Better       Best \n#> 0.05204163 0.22497998 0.61889512 0.10408327 \n#> \n#> $feature_distribution$YearsAtCompany\n#> \n#>         1         2         3         4 \n#> 0.3226581 0.2137710 0.2217774 0.2417934 \n#> \n#> $feature_distribution$YearsInCurrentRole\n#> \n#>          1          2          3          4 \n#> 0.46757406 0.08726982 0.27542034 0.16973579 \n#> \n#> $feature_distribution$YearsSinceLastPromotion\n#> \n#>         1         2         3 \n#> 0.6413131 0.1120897 0.2465973 \n#> \n#> $feature_distribution$YearsWithCurrManager\n#> \n#>          1          2          3          4 \n#> 0.46357086 0.09767814 0.25300240 0.18574860 \n#> \n#> \n#> attr(,\"class\")\n#> [1] \"data_frame_explainer\" \"explainer\"            \"list\"\n\n\n\n?lime::explain\n\n#> starting httpd help server ... done\n\n explanation <- test_tbl %>%\n   slice(1) %>%\n   select(-Attrition) %>%\n   lime::explain(\n     \n     # Pass our explainer object\n     explainer = explainer,\n     # Because it is a binary classification model: 1\n     n_labels   = 1,\n     # number of features to be returned\n     n_features = 8,\n     # number of localized linear models\n     n_permutations = 5000,\n     # Let's start with 1\n     kernel_width   = 1\n   )\n\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n\n#> Warning in doTryCatch(return(expr), name, parentenv, handler): Test/Validation\n#> dataset is missing column 'Attrition': substituting in a column of NaN\n\n explanation\n\n\n\n  \n\n\n explanation %>%\n   as.tibble() %>%\n   select(feature:prediction) \n\n\n\n  \n\n\n g <- plot_features(explanation = explanation, ncol = 1)\n \n plot_features(explanation = explanation, ncol = 1)\n\n\n\n\n\n\n\n\n# 3.3 Multiple Explanations ----\n \n explanation <- test_tbl %>%\n   slice(1:20) %>%\n   select(-Attrition) %>%\n   lime::explain(\n     explainer = explainer,\n     n_labels   = 1,\n     n_features = 8,\n     n_permutations = 5000,\n     kernel_width   = 0.5\n   )\n\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n\n#> Warning in doTryCatch(return(expr), name, parentenv, handler): Test/Validation\n#> dataset is missing column 'Attrition': substituting in a column of NaN\n\n explanation %>%\n   as.tibble()\n\n\n\n  \n\n\n plot_features(explanation, ncol = 4)\n\n\n\n\n\n\n plot_explanations(explanation)\n\n\n\n\n\n\n\n\n1 Challenge part 1 —-\n\n explanation %>% \n   as.tibble()\n\n\n\n  \n\n\n case_1 <- explanation %>%\n   filter(case == 1)\n \n case_1 %>%\n   plot_features()\n\n\n\n\n\n\n case_1 %>%\n   ggplot(aes(feature_weight, feature)) +\n   geom_col(fill = \"#1a2c50\") +\n   geom_smooth(method = \"lm\", se = FALSE) +\n   scale_fill_manual(values = c(\"steelblue\", \"firebrick\"), drop = FALSE) +\n   labs(\n     title = (\"Model explanation\"),\n     x = \"Weight\",\n     y = \"Feature\"\n   ) +\n   theme_tq_dark()\n\n#> `geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n2 Challenge part 2 —-\n\n explanation %>% ggplot(aes_(~case, ~feature_desc)) +\n   geom_tile(aes_(fill = ~feature_weight)) + \n   scale_x_discrete(\"Case\", expand = c(0, 0)) +\n   scale_y_discrete(\"Feature\", expand = c(0, 0)) +\n   scale_fill_gradient2(\"Feature\\nweight\", low = \"firebrick\", mid = \"#f7f7f7\", high = \"steelblue\") +\n   theme(panel.border = element_rect(fill = NA,\n                                     colour = \"grey60\",\n                                     size = 1),\n         panel.grid = element_blank(),\n         legend.position = \"right\",\n         axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1)) +\n   facet_wrap(~label)\n\n#> Warning: `aes_()` was deprecated in ggplot2 3.0.0.\n#> ℹ Please use tidy evaluation idioms with `aes()`\n\n\n#> Warning: The `size` argument of `element_rect()` is deprecated as of ggplot2 3.4.0.\n#> ℹ Please use the `linewidth` argument instead."
  },
  {
    "objectID": "content/01_journal/Supervised_ML_Regression_2.html",
    "href": "content/01_journal/Supervised_ML_Regression_2.html",
    "title": "02 Supervised ML Regression (II)",
    "section": "",
    "text": "1 Libraries\n\n# install packages\n# Standard\nlibrary(tidyverse)\n\n# Modeling\nlibrary(parsnip)\nlibrary(tidymodels)\nlibrary(rstanarm)\nlibrary(broom.mixed)\n\n\n# Preprocessing & Sampling\nlibrary(recipes)\nlibrary(rsample)\n\n# Modeling Error Metrics\nlibrary(yardstick)\n\n# Plotting Decision Trees\nlibrary(rpart.plot)\n\n\n2 Modeling\n\nbike_data_tbl <- readRDS(\"bike_orderlines.rds\")\nbike_data_tbl\n\n\n\n  \n\n\n\n\nmodel_sales_tbl <- bike_data_tbl %>%\n  select(total_price, model, category_2, frame_material) %>%\n  \n  group_by(model, category_2, frame_material) %>%\n  summarise(total_sales = sum(total_price)) %>%\n  ungroup() %>%\n  \n  arrange(desc(total_sales))\n\n#> `summarise()` has grouped output by 'model', 'category_2'. You can override\n#> using the `.groups` argument.\n\n\n\nmodel_sales_tbl %>%\n  mutate(category_2 = as_factor(category_2) %>% \n           fct_reorder(total_sales, .fun = max) %>% \n           fct_rev()) %>%\n  \n  ggplot(aes(frame_material, total_sales)) +\n  geom_violin() +\n  geom_jitter(width = 0.1, alpha = 0.5, color = \"#2c3e50\") +\n  facet_wrap(~ category_2) +\n  scale_y_continuous(labels = scales::dollar_format(scale = 1e-6, suffix = \"M\", accuracy = 0.1)) +\n  tidyquant::theme_tq() +\n  labs(title = \"Total Sales for Each Model\",x = \"Frame Material\", y = \"Revenue\")\n\n#> Registered S3 method overwritten by 'quantmod':\n#>   method            from\n#>   as.zoo.data.frame zoo\n\n\n#> Warning: Groups with fewer than two data points have been dropped.\n#> Groups with fewer than two data points have been dropped.\n#> Groups with fewer than two data points have been dropped.\n\n\n#> Warning in max(data$density): no non-missing arguments to max; returning -Inf\n\n\n#> Warning: Computation failed in `stat_ydensity()`\n#> Caused by error in `$<-.data.frame`:\n#> ! replacement has 1 row, data has 0\n\n\n\n\n\n\n\n\n\nbike_features_tbl <- readRDS(\"bike_features_tbl.rds\")\nbike_features_tbl <- bike_features_tbl %>% \n  select(frame_material:gender, `Rear Derailleur`, `Shift Lever`) %>% \n  mutate(`shimano dura-ace`        = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano dura-ace \") %>% as.numeric(),\n    `shimano ultegra`         = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano ultegra \") %>% as.numeric(),\n    `shimano 105`             = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano 105 \") %>% as.numeric(),\n    `shimano tiagra`          = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano tiagra \") %>% as.numeric(),\n    `Shimano sora`            = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano sora\") %>% as.numeric(),\n    `shimano deore`           = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano deore(?! xt)\") %>% as.numeric(),\n    `shimano slx`             = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano slx\") %>% as.numeric(),\n    `shimano grx`             = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano grx\") %>% as.numeric(),\n    `Shimano xt`              = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano deore xt |shimano xt \") %>% as.numeric(),\n    `Shimano xtr`             = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano xtr\") %>% as.numeric(),\n    `Shimano saint`           = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano saint\") %>% as.numeric(),\n    `SRAM red`                = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram red\") %>% as.numeric(),\n    `SRAM force`              = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram force\") %>% as.numeric(),\n    `SRAM rival`              = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram rival\") %>% as.numeric(),\n    `SRAM apex`               = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram apex\") %>% as.numeric(),\n    `SRAM xx1`                = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram xx1\") %>% as.numeric(),\n    `SRAM x01`                = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram x01|sram xo1\") %>% as.numeric(),\n    `SRAM gx`                 = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram gx\") %>% as.numeric(),\n    `SRAM nx`                 = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram nx\") %>% as.numeric(),\n    `SRAM sx`                 = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram sx\") %>% as.numeric(),\n    `SRAM sx`                 = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram sx\") %>% as.numeric(),\n    `Campagnolo potenza`      = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"campagnolo potenza\") %>% as.numeric(),\n    `Campagnolo super record` = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"campagnolo super record\") %>% as.numeric(),\n    `shimano nexus`           = `Shift Lever`     %>% str_to_lower() %>% str_detect(\"shimano nexus\") %>% as.numeric(),\n    `shimano alfine`          = `Shift Lever`     %>% str_to_lower() %>% str_detect(\"shimano alfine\") %>% as.numeric()\n  ) %>%  \n  select(-c(`Rear Derailleur`, `Shift Lever`)) %>% \n  mutate_if(is.numeric, ~replace(., is.na(.), 0)) \nbike_features_tbl <- bike_features_tbl %>% \n  mutate(id = row_number()) %>% \n  mutate(frame_material = factor(frame_material)) %>%\n  select(id, everything()) \nbike_features_tbl %>% distinct(category_2)\n\n\n\n  \n\n\nsplit_obj <- rsample::initial_split(bike_features_tbl, prop   = 0.80, \n                                    strata = \"category_2\")\nsplit_obj %>% training() %>% distinct(category_2)\n\n\n\n  \n\n\nsplit_obj %>% testing() %>% distinct(category_2)\n\n\n\n  \n\n\ntrain_tbl <- training(split_obj)\ntest_tbl  <- testing(split_obj)\ntrain_data <- train_tbl %>% set_names(str_replace_all(names(train_tbl), \" |-\", \"_\"))\ntest_data  <- test_tbl  %>% set_names(str_replace_all(names(test_tbl), \" |-\", \"_\"))\n\n\n3 Recipe\n\nbike_recipe <- recipe(frame_material ~ ., data = train_data) %>% \n  step_dummy(all_nominal(), -all_outcomes()) %>% \n  step_zv(all_predictors()) \nd <- summary(bike_recipe)\nlr_mod <- logistic_reg() %>% \n  set_engine(\"glm\")\nlr_mod\n\n#> Logistic Regression Model Specification (classification)\n#> \n#> Computational engine: glm\n\nbike_workflow <- workflow() %>% \n  add_model(lr_mod) %>% \n  add_recipe(bike_recipe)\nbike_workflow\n\n#> ══ Workflow ════════════════════════════════════════════════════════════════════\n#> Preprocessor: Recipe\n#> Model: logistic_reg()\n#> \n#> ── Preprocessor ────────────────────────────────────────────────────────────────\n#> 2 Recipe Steps\n#> \n#> • step_dummy()\n#> • step_zv()\n#> \n#> ── Model ───────────────────────────────────────────────────────────────────────\n#> Logistic Regression Model Specification (classification)\n#> \n#> Computational engine: glm\n\nbike_fit <- bike_workflow %>% \n  fit(data = train_data)\n\n#> Warning: glm.fit: algorithm did not converge\n\n\n#> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred\n\nbike_fit\n\n#> ══ Workflow [trained] ══════════════════════════════════════════════════════════\n#> Preprocessor: Recipe\n#> Model: logistic_reg()\n#> \n#> ── Preprocessor ────────────────────────────────────────────────────────────────\n#> 2 Recipe Steps\n#> \n#> • step_dummy()\n#> • step_zv()\n#> \n#> ── Model ───────────────────────────────────────────────────────────────────────\n#> \n#> Call:  stats::glm(formula = ..y ~ ., family = stats::binomial, data = data)\n#> \n#> Coefficients:\n#>                (Intercept)                          id  \n#>                 -2.404e+01                   1.067e-01  \n#>                     weight                       price  \n#>                 -9.653e-01                   1.912e-03  \n#>           shimano_dura_ace             shimano_ultegra  \n#>                  4.896e+06                   4.896e+06  \n#>                shimano_105              shimano_tiagra  \n#>                  4.143e+06                   4.143e+06  \n#>              shimano_deore                 shimano_slx  \n#>                  1.643e+00                  -4.594e+01  \n#>                shimano_grx                  Shimano_xt  \n#>                 -4.260e+00                   1.090e+01  \n#>              Shimano_saint                    SRAM_red  \n#>                  8.268e+01                   4.144e+06  \n#>                 SRAM_force                  SRAM_rival  \n#>                  4.504e+15                   4.863e+06  \n#>                  SRAM_apex                    SRAM_xx1  \n#>                  4.885e+06                  -4.426e+01  \n#>                   SRAM_x01                     SRAM_gx  \n#>                  2.360e+01                   8.914e-01  \n#>                    SRAM_nx                     SRAM_sx  \n#>                 -4.579e+01                  -2.116e+01  \n#>         Campagnolo_potenza     Campagnolo_super_record  \n#>                  4.143e+06                   4.665e+06  \n#>              shimano_nexus              shimano_alfine  \n#>                  2.296e+03                   2.293e+03  \n#>          category_1_Gravel    category_1_Hybrid...City  \n#>                  4.847e+14                  -2.493e+15  \n#>        category_1_Mountain             category_1_Road  \n#>                 -1.087e+13                  -4.143e+06  \n#>        category_2_All.Road             category_2_City  \n#>                 -1.718e+02                   2.493e+15  \n#>   category_2_Cross.Country       category_2_Cyclocross  \n#>                  4.955e+14                  -7.202e+05  \n#>       category_2_Dirt.Jump         category_2_Downhill  \n#>                  1.087e+13                   1.087e+13  \n#>          category_2_E.City        category_2_E.Fitness  \n#>                  7.279e+01                  -7.126e+00  \n#>        category_2_E.Gravel       category_2_E.Mountain  \n#>                  4.950e+01                  -7.882e+15  \n#>      category_2_E.Trekking        category_2_Endurance  \n#>                         NA                  -9.215e+00  \n#>          category_2_Enduro        category_2_Fat.Bikes  \n#>                  1.087e+13                   1.087e+13  \n#>            category_2_Race          category_2_Touring  \n#>                  1.416e+00                   2.493e+15  \n#> \n#> ...\n#> and 34 more lines.\n\n\n\nbike_fit %>% \n  pull_workflow_fit() %>% \n  tidy()\n\n#> Warning: `pull_workflow_fit()` was deprecated in workflows 0.2.3.\n#> ℹ Please use `extract_fit_parsnip()` instead.\n\n\n\n\n  \n\n\nbike_predict <- predict(bike_fit, test_data, type=\"prob\") %>% \n  bind_cols(test_data %>% select(frame_material, category_2)) \n\n#> Warning: There are new levels in a factor: E-Road\n\n\n#> Warning: There are new levels in a factor: Endurace:ON\n\n\n#> Warning in predict.lm(object, newdata, se.fit, scale = 1, type = if (type == :\n#> prediction from rank-deficient fit; attr(*, \"non-estim\") has doubtful cases\n\nbike_predict %>% \n  roc_curve(truth = frame_material, .pred_aluminium) %>% \n  autoplot()\n\n\n\n\n\n\n\n\nbike_predict %>% \n  roc_curve(truth = frame_material, .pred_carbon) %>% \n  autoplot()\n\n\n\n\n\n\nbike_predict\n\n\n\n  \n\n\n\n\nroc_al <- bike_predict %>% \n  roc_auc(truth = frame_material, .pred_aluminium)\nroc_al\n\n\n\n  \n\n\n\n\nroc_car <- bike_predict %>% \n  roc_auc(truth = frame_material, .pred_carbon)\nroc_car\n\n\n\n  \n\n\n\n\n4 Evaluation\n\nmodel_01_linear_lm_simple <- linear_reg(mode = \"regression\") %>%\n  set_engine(\"lm\") %>%\n  fit(price ~ category_2 + frame_material, data = train_data)\nmodel_01_linear_lm_simple\n\n#> parsnip model object\n#> \n#> \n#> Call:\n#> stats::lm(formula = price ~ category_2 + frame_material, data = data)\n#> \n#> Coefficients:\n#>              (Intercept)        category_2All-Road            category_2City  \n#>                   2202.2                    -495.8                   -1120.4  \n#>  category_2Cross-Country      category_2Cyclocross       category_2Dirt Jump  \n#>                    284.4                    -549.0                   -1178.2  \n#>       category_2Downhill          category_2E-City       category_2E-Fitness  \n#>                   1439.5                     795.6                     556.8  \n#>       category_2E-Gravel      category_2E-Mountain      category_2E-Trekking  \n#>                   1025.0                    1102.0                     854.8  \n#>      category_2Endurance          category_2Enduro       category_2Fat Bikes  \n#>                   -316.3                     471.2                   -1460.0  \n#>           category_2Race         category_2Touring           category_2Trail  \n#>                    670.9                   -1071.8                    -494.9  \n#> category_2Triathlon Bike      frame_materialcarbon  \n#>                    685.8                    1641.8\n\n\n\ntest_data <- test_data %>% filter(category_2 != \"E-Road\")\nyards <- model_01_linear_lm_simple %>%\n  predict(new_data = test_data) %>%\n  bind_cols(test_data %>% select(price)) %>%\n  yardstick::metrics(truth = price, estimate = .pred)\nyards\n\n\n\n  \n\n\n\n\ng1 <- bike_features_tbl %>% \n  mutate(category_2 = as.factor(category_2) %>% \n           fct_reorder(price)) %>% \n  \n  ggplot(aes(category_2, price)) +\n  geom_violin() +\n  geom_jitter(width = 0.2, alpha = 0.5, color = \"#2dc6d6\") +\n  coord_flip() +\n  facet_wrap(~ frame_material) +\n  scale_y_continuous(labels = scales::dollar_format()) +\n  labs( title = \"Price for Each Model\", y = \"\", x = \"Category 2\")\ng1\n\n#> Warning: Groups with fewer than two data points have been dropped.\n#> Groups with fewer than two data points have been dropped.\n#> Groups with fewer than two data points have been dropped.\n\n\n\n\n\n\n\n\n\nnew_trail <- tibble(\n  model = \"Exceed AL SL new\",\n  category_2 = \"Trail\",\n  frame_material = \"aluminium\",\n  shimano_dura_ace = 0,\n  shimano_ultegra = 0,\n  shimano_105 = 0,\n  shimano_tiagra = 0,\n  Shimano_sora = 0,\n  shimano_deore = 0,\n  shimano_slx = 0,\n  shimano_grx = 0,\n  Shimano_xt = 1,\n  Shimano_xtr = 0,\n  Shimano_saint = 0,\n  SRAM_red = 0,\n  SRAM_force = 0,\n  SRAM_rival = 0,\n  SRAM_apex = 0,\n  SRAM_xx1 = 0,\n  SRAM_x01 = 0,\n  SRAM_gx = 0,\n  SRAM_nx = 0,\n  SRAM_sx = 0,\n  Campagnolo_potenza = 0,\n  Campagnolo_super_record = 0,\n  shimano_nexus = 0,\n  shimano_alfine = 0\n) \nnew_trail\n\n\n\n  \n\n\n\n\npredict(model_01_linear_lm_simple, new_data = new_trail)\n\n\n\n  \n\n\nmodels_tbl <- tibble(\n  model_id = str_c(\"Model 0\", 1:1),\n  model = list(\n    model_01_linear_lm_simple\n  )\n)\nmodels_tbl\n\n\n\n  \n\n\n\n\npredictions_new_trail <- models_tbl %>%\n  mutate(predictions = map(model, predict, new_data = new_trail)) %>%\n  unnest(predictions) %>%\n  mutate(category_2 = \"Trail\") %>%\n  left_join(new_trail, by = \"category_2\")\npredictions_new_trail\n\n\n\n  \n\n\n\n\ng2 <- g1 +\n  geom_point(aes(y = .pred), color = \"red\", alpha = 0.5,\n             data = predictions_new_trail) +\n  ggrepel::geom_text_repel(aes(label = model_id, y = .pred),\n                           size = 5,\n                           data = predictions_new_trail)\ng2\n\n#> Warning: Groups with fewer than two data points have been dropped.\n#> Groups with fewer than two data points have been dropped.\n#> Groups with fewer than two data points have been dropped."
  },
  {
    "objectID": "content/02_notes/05_class_notes.html",
    "href": "content/02_notes/05_class_notes.html",
    "title": "Class Notes",
    "section": "",
    "text": "IMPORTANT: You can delete everything in here and start fresh. You might want to start by not deleting anything above this line until you know what that stuff is doing.\nThis is an .qmd file. It is plain text with special features. Any time you write just like this, it will be compiled to normal text in the website. If you put a # in front of your text, it will create a top level-header."
  },
  {
    "objectID": "content/03_other/06_links.html",
    "href": "content/03_other/06_links.html",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual .\n\n\n\n\nGoogle is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My Lab Journal",
    "section": "",
    "text": "This is a template example for lab journaling. Students in the data science courses at the Institute of Entrepreneurship will use this template to learn R for business analytics. Students can replace this text as they wish."
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "My Lab Journal",
    "section": "How to use",
    "text": "How to use\n\nAccept the assignment and get your own github repo.\nBlog/journal what you are doing in R, by editing the .qmd files.\nSee the links page for lots of helpful links on learning R.\nChange everything to make it your own.\nMake sure to render you website everytime before you want to upload changes"
  }
]